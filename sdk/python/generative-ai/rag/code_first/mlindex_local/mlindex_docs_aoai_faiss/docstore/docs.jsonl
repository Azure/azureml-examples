{"content": "# AzureML MLIndex Asset creation\n\n# AzureML MLIndex Asset creation\nMLIndex assets in AzureML represent a model used to generate embeddings from text and an index which can be searched using embedding vectors.\nRead more about their structure [here](./docs/mlindex.md).", "metadata": {"doc_id": "README.md0", "chunk_hash": "845cee45d70ccece62224e881c52af49077ff177e181a30a36f6043eed9f3ebc", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "0"}, "stats": {"tiktokens": 56, "chars": 267, "lines": 5}, "markdown_heading": {"heading": "AzureML MLIndex Asset creation", "level": 1}}, "document_id": "README.md0"}
{"content": "# AzureML MLIndex Asset creation\n\n# AzureML MLIndex Asset creation\n## Pre-requisites\n0. Install `azure-ai-ml` and `azureml-rag:\n    - `pip install 'azure-ai-ml==1.10.0a20230825006' --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/`\n    - `pip install -U 'azureml-rag[document_parsing,faiss,cognitive_search]>=0.2.0'`\n1. You have unstructured data.\n    - In one of [AzureMLs supported data sources](https://learn.microsoft.com/azure/machine-learning/concept-data?view=azureml-api-2): Blob, ADLSgen2, OneLake, S3, Git\n    - In any of these supported file formats: md, txt, py, pdf, ppt(x), doc(x)\n2. You have an embedding model.\n    - [Create", "metadata": {"doc_id": "README.md1", "chunk_hash": "0d9520be70920a41775fe07c4efba32786b2cc0f6ac1067e9522ed2f5f0e9b7a", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "1"}, "stats": {"tiktokens": 213, "chars": 697, "lines": 12}, "markdown_heading": {"heading": "Pre-requisites", "level": 2}}, "document_id": "README.md1"}
{"content": "# AzureML MLIndex Asset creation\n\n# AzureML MLIndex Asset creation\n## Pre-requisites\n an Azure OpenAI service + connection](https://learn.microsoft.com/azure/machine-learning/prompt-flow/concept-connections?view=azureml-api-2)\n    - Use a HuggingFace `sentence-transformer` model (you can just use it now, to leverage the MLIndex in PromptFlow a [Custom Runtime](https://promptflow.azurewebsites.net/how-to-guides/how-to-customize-environment-runtime.html) will be required)\n3. You have an Index to ingest data to.\n    - [Create an Azure Cognitive Search service + connection](https://learn.microsoft.com/azure/machine-learning/prompt-flow/concept-connections?view=azureml-api-2)\n    - Use a Faiss index (you can just use it now)", "metadata": {"doc_id": "README.md2", "chunk_hash": "e1f8cc29677df8d30cba41af8f9bad8dda7633f50663e962ed2f6637d2468711", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "2"}, "stats": {"tiktokens": 178, "chars": 729, "lines": 9}, "markdown_heading": {"heading": "Pre-requisites", "level": 2}}, "document_id": "README.md2"}
{"content": "# AzureML MLIndex Asset creation\n\n# AzureML MLIndex Asset creation\n## Let's Ingest and Index\nA DataIndex job is configured using the `azure-ai-ml` python sdk/cli, either directly in code or with a yaml file.", "metadata": {"doc_id": "README.md3", "chunk_hash": "124abe065ab8e85fcace0695135a65b0e6a770b87b652619f6d7b39e68a08982", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "3"}, "stats": {"tiktokens": 53, "chars": 207, "lines": 5}, "markdown_heading": {"heading": "Let's Ingest and Index", "level": 2}}, "document_id": "README.md3"}
{"content": "# AzureML MLIndex Asset creation\n\n# AzureML MLIndex Asset creation\n## Let's Ingest and Index\n### SDK\nThe examples are runnable as Python scripts, assuming the pre-requisites have been acquired and configured in the script.  \nOpening them in vscode enables executing each block below a `# %%` comment like a jupyter notebook cell.", "metadata": {"doc_id": "README.md4", "chunk_hash": "6d53561c36b82439d6df6cea68eeff71f494de8a4c062bee6b47045a9f2bddd5", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "4"}, "stats": {"tiktokens": 72, "chars": 329, "lines": 7}, "markdown_heading": {"heading": "SDK", "level": 3}}, "document_id": "README.md4"}
{"content": "# AzureML MLIndex Asset creation\n\n# AzureML MLIndex Asset creation\n## Let's Ingest and Index\n### SDK\n#### Cloud Creation\n##### Process this documentation using Azure OpenAI and Azure Cognitive Search", "metadata": {"doc_id": "README.md5", "chunk_hash": "8bec6a1213d6c7627206e3adfa661172bfcb012ca70b4566a8bf871a2634c812", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "5"}, "stats": {"tiktokens": 43, "chars": 199, "lines": 7}, "markdown_heading": {"heading": "Cloud Creation", "level": 4}}, "document_id": "README.md5"}
{"content": "# AzureML MLIndex Asset creation\n\n- [local_docs_to_acs_mlindex.py](./data_index_job/local_docs_to_acs_mlindex.py)\n- [local_docs_to_acs_mlindex.ipynb](./data_index_job/local_docs_to_acs_mlindex.ipynb)\n##### Index data from S3 using OneLake", "metadata": {"doc_id": "README.md6", "chunk_hash": "5ad54746dfa7ab2d3793298c82c7b4f536fc463532c2480f1a1a3c5b3d04fe49", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "6"}, "stats": {"tiktokens": 69, "chars": 238, "lines": 5}, "markdown_heading": {"heading": "- [local_docs_to_acs_mlindex.py](./data_index_job/local_docs_to_acs_mlindex.py)\n- [local_docs_to_acs_mlindex.ipynb](./data_index_job/local_docs_to_acs_mlindex.ipynb)", "level": 0}}, "document_id": "README.md6"}
{"content": "# AzureML MLIndex Asset creation\n\n- [s3_to_acs_mlindex.py](./data_index_job/s3_to_acs_mlindex.py)\n- [scheduled_s3_to_asc_mlindex.py](./data_index_job/scheduled_s3_to_asc_mlindex.py)\n##### Ingest Azure Search docs from GitHub into a Faiss Index", "metadata": {"doc_id": "README.md7", "chunk_hash": "67f338ae613c4c12940f1c0027edc3f6b3f73a406de6aa8de64ba859b1dc4076", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "7"}, "stats": {"tiktokens": 70, "chars": 243, "lines": 5}, "markdown_heading": {"heading": "- [s3_to_acs_mlindex.py](./data_index_job/s3_to_acs_mlindex.py)\n- [scheduled_s3_to_asc_mlindex.py](./data_index_job/scheduled_s3_to_asc_mlindex.py)", "level": 0}}, "document_id": "README.md7"}
{"content": "# AzureML MLIndex Asset creation\n\n- [cog_search_docs_faiss_mlindex.py](./data_index_job/cog_search_docs_faiss_mlindex.py)\n#### Local Creation", "metadata": {"doc_id": "README.md8", "chunk_hash": "689844a268c0329e17c8276458bf58f9a8de8bdec437b8799fbbcf6bddfb9b21", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "8"}, "stats": {"tiktokens": 37, "chars": 141, "lines": 4}, "markdown_heading": {"heading": "- [cog_search_docs_faiss_mlindex.py](./data_index_job/cog_search_docs_faiss_mlindex.py)", "level": 0}}, "document_id": "README.md8"}
{"content": "# AzureML MLIndex Asset creation\n\n- [cog_search_docs_faiss_mlindex.py](./data_index_job/cog_search_docs_faiss_mlindex.py)\n##### Process this documentation using Azure OpenAI and Azure Cognitive Search\n- [local_docs_to_acs_aoai_mlindex.py](./mlindex_local/local_docs_to_acs_aoai_mlindex.py)", "metadata": {"doc_id": "README.md9", "chunk_hash": "90d84b86317b6e3b1b64880db741cb07f7ba59cfcfcfc0a02bda632b952e2f1d", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "9"}, "stats": {"tiktokens": 77, "chars": 289, "lines": 5}, "markdown_heading": {"heading": "Process this documentation using Azure OpenAI and Azure Cognitive Search", "level": 5}}, "document_id": "README.md9"}
{"content": "# AzureML MLIndex Asset creation\n\n- [cog_search_docs_faiss_mlindex.py](./data_index_job/cog_search_docs_faiss_mlindex.py)\n##### Process this documentation using SentenceTransformers and Faiss\n- [local_docs_to_faiss_mlindex.py](./mlindex_local/local_docs_to_faiss_mlindex.py)\n- [local_docs_to_faiss_mlindex_with_promptflow.py](./mlindex_local/local_docs_to_faiss_mlindex_with_promptflow.py)\n    - Learn more about [Promptflow here](https://microsoft.github.io/promptflow/)", "metadata": {"doc_id": "README.md10", "chunk_hash": "544ba9a5361194aa738bc8eac5b841d649eca626722b4fcb4c914bcf08f2d2c9", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "10"}, "stats": {"tiktokens": 120, "chars": 471, "lines": 7}, "markdown_heading": {"heading": "Process this documentation using SentenceTransformers and Faiss", "level": 5}}, "document_id": "README.md10"}
{"content": "# AzureML MLIndex Asset creation\n\n- [cog_search_docs_faiss_mlindex.py](./data_index_job/cog_search_docs_faiss_mlindex.py)\n##### Use a Langchain Documents to create an Index\n- [langchain_docs_to_mlindex.py](./mlindex_local/langchain_docs_to_mlindex.py)", "metadata": {"doc_id": "README.md11", "chunk_hash": "af3b22b8cecab1796b86686290abd7d078b575d23f2e51f78badaad7e1ec7769", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "11"}, "stats": {"tiktokens": 67, "chars": 251, "lines": 5}, "markdown_heading": {"heading": "Use a Langchain Documents to create an Index", "level": 5}}, "document_id": "README.md11"}
{"content": "# AzureML MLIndex Asset creation\n\n- [cog_search_docs_faiss_mlindex.py](./data_index_job/cog_search_docs_faiss_mlindex.py)\n## Using the MLIndex asset\nMore information about how to use MLIndex in various places [here]().", "metadata": {"doc_id": "README.md12", "chunk_hash": "25ecaa3815108d40c07f85e17536faedffdf541bfbf5928f3b45a00026f54ce3", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "12"}, "stats": {"tiktokens": 56, "chars": 218, "lines": 5}, "markdown_heading": {"heading": "Using the MLIndex asset", "level": 2}}, "document_id": "README.md12"}
{"content": "# AzureML MLIndex Asset creation\n\n- [cog_search_docs_faiss_mlindex.py](./data_index_job/cog_search_docs_faiss_mlindex.py)\n## Appendix\n### Which Embeddings Model to use?", "metadata": {"doc_id": "README.md13", "chunk_hash": "af765c8a5fa1353f0125530b8a31e39d6b5473b4f64960ea9aa76e387c08b04f", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "13"}, "stats": {"tiktokens": 45, "chars": 168, "lines": 5}, "markdown_heading": {"heading": "Appendix", "level": 2}}, "document_id": "README.md13"}
{"content": "# AzureML MLIndex Asset creation\n\nThere are currently two supported Embedding options: OpenAI's `text-embedding-ada-002` embedding model or HuggingFace embedding models. Here are some factors that might influence your decision:\n#### OpenAI", "metadata": {"doc_id": "README.md14", "chunk_hash": "61f1dd17fd89aef446f38645d0645359b836ce095d6bae831bcb99d74e8f217e", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "14"}, "stats": {"tiktokens": 51, "chars": 239, "lines": 4}, "markdown_heading": {"heading": "There are currently two supported Embedding options: OpenAI's `text-embedding-ada-002` embedding model or HuggingFace embedding models. Here are some factors that might influence your decision:", "level": 0}}, "document_id": "README.md14"}
{"content": "# AzureML MLIndex Asset creation\n\nOpenAI has [great documentation](https://platform.openai.com/docs/guides/embeddings) on their Embeddings model `text-embedding-ada-002`, it can handle up to 8191 tokens and can be accessed using [Azure OpenAI](https://learn.microsoft.com/azure/cognitive-services/openai/concepts/models#embeddings-models) or OpenAI directly.\nIf you have an existing Azure OpenAI Instance you can connect it to AzureML, if you don't AzureML provisions a default one for you called `Default_AzureOpenAI`.\nThe main limitation when using `text-embedding-ada-002` is cost/quota available for the model. Otherwise it provides high quality embeddings across a wide array of text domains while being simple to use.\n#### HuggingFace", "metadata": {"doc_id": "README.md15", "chunk_hash": "ffd70db7760f4d4559c6425b56d00ee55c1ef34e449db206dd406d09e3896d4e", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "15"}, "stats": {"tiktokens": 170, "chars": 740, "lines": 6}, "markdown_heading": {"heading": "OpenAI has [great documentation](https://platform.openai.com/docs/guides/embeddings) on their Embeddings model `text-embedding-ada-002`, it can handle up to 8191 tokens and can be accessed using [Azure OpenAI](https://learn.microsoft.com/azure/cognitive-services/openai/concepts/modelsembeddings-models) or OpenAI directly.\nIf you have an existing Azure OpenAI Instance you can connect it to AzureML, if you don't AzureML provisions a default one for you called `Default_AzureOpenAI`.\nThe main limitation when using `text-embedding-ada-002` is cost/quota available for the model. Otherwise it provides high quality embeddings across a wide array of text domains while being simple to use.", "level": 0}}, "document_id": "README.md15"}
{"content": "# AzureML MLIndex Asset creation\n\nHuggingFace hosts many different models capable of embedding text into single-dimensional vectors. The [MTEB Leaderboard](https://huggingface.co/spaces/mteb/leaderboard) ranks the performance of embeddings models on a few axis, not all models ranked can be run locally (e.g. `text-embedding-ada-002` is on the list), though many can and there is a range of larger and smaller models. When embedding with HuggingFace the model is loaded locally for inference, this will potentially impact your choice of compute resources.\n\n**NOTE:** The default PromptFlow Runtime does not come with HuggingFace model dependencies installed, Indexes created using HuggingFace embeddings will not work in PromptFlow by default. **Pick OpenAI if you want to use PromptFlow**\n### Setting up OneLake and S3", "metadata": {"doc_id": "README.md16", "chunk_hash": "611483090b2500e90299102c46582212c19f1a13e48aa32b14410f2a23fe04c7", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "16"}, "stats": {"tiktokens": 178, "chars": 819, "lines": 6}, "markdown_heading": {"heading": "HuggingFace hosts many different models capable of embedding text into single-dimensional vectors. The [MTEB Leaderboard](https://huggingface.co/spaces/mteb/leaderboard) ranks the performance of embeddings models on a few axis, not all models ranked can be run locally (e.g. `text-embedding-ada-002` is on the list), though many can and there is a range of larger and smaller models. When embedding with HuggingFace the model is loaded locally for inference, this will potentially impact your choice of compute resources.\n\n**NOTE:** The default PromptFlow Runtime does not come with HuggingFace model dependencies installed, Indexes created using HuggingFace embeddings will not work in PromptFlow by default. **Pick OpenAI if you want to use PromptFlow**", "level": 0}}, "document_id": "README.md16"}
{"content": "# AzureML MLIndex Asset creation\n\n[Create a lakehouse with OneLake](https://learn.microsoft.com/fabric/onelake/create-lakehouse-onelake)\n\n[Setup a shortcut to S3](https://learn.microsoft.com/fabric/onelake/create-s3-shortcut)\n", "metadata": {"doc_id": "README.md17", "chunk_hash": "316411eb24f559a295fc9e5c8d205bc3e68000036563bbbb5a43623dcb0385f8", "source": {"title": "AzureML MLIndex Asset creation", "filename": "README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/README.md", "mtime": 1694042161.2260115, "chunk_id": "17"}, "stats": {"tiktokens": 59, "chars": 226, "lines": 5}, "markdown_heading": {"heading": "[Create a lakehouse with OneLake](https://learn.microsoft.com/fabric/onelake/create-lakehouse-onelake)\n\n[Setup a shortcut to S3](https://learn.microsoft.com/fabric/onelake/create-s3-shortcut)", "level": 0}}, "document_id": "README.md17"}
{"content": "# MLIndex\n\n# MLIndex\nAn example MLIndex file:\n\n```yaml\nembeddings:\n  api_base: https://azureml-rag-oai.openai.azure.com\n  api_type: azure\n  api_version: 2023-03-15-preview\n  batch_size: \"1\"\n  connection:\n    id: Default_AzureOpenAI\n  connection_type: environment\n  deployment: text-embedding-ada-002\n  dimension: 1536\n  kind: open_ai\n  model: text-embedding-ada-002\n  schema_version: \"2\"\nindex:\n  api_version: 2023-07-01-preview\n  connection:\n    id: /subs/<sub>/rgs/<rg>/wss/<ws>/conns/<conn>\n  connection_type: workspace_connection\n  endpoint: https://azureml-rag-acs.search.windows.net\n  engine: azure-sdk\n  field_mapping:\n    content: content\n    embedding:", "metadata": {"doc_id": "docs/mlindex.md0", "chunk_hash": "14a7af951d46e676ca5253d482dbbf0d7f0a5ecb44d1925068cdb15ccd1bef63", "source": {"title": "MLIndex", "filename": "docs/mlindex.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/docs/mlindex.md", "mtime": 1694042161.242611, "chunk_id": "0"}, "stats": {"tiktokens": 204, "chars": 661, "lines": 29}, "markdown_heading": {"heading": "MLIndex", "level": 1}}, "document_id": "docs/mlindex.md0"}
{"content": "# MLIndex\n\n# MLIndex\n content_vector_open_ai\n    filename: sourcefile\n    metadata: meta_json_string\n    title: title\n    url: sourcepage\n  index: azure-docs-aoai-embeddings-rcts\n  kind: acs\n```", "metadata": {"doc_id": "docs/mlindex.md1", "chunk_hash": "7147b5397f016823ec3b825e688261585c40012101276617c8cfe81252ad1c6d", "source": {"title": "MLIndex", "filename": "docs/mlindex.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/docs/mlindex.md", "mtime": 1694042161.242611, "chunk_id": "1"}, "stats": {"tiktokens": 59, "chars": 194, "lines": 11}, "markdown_heading": {"heading": "MLIndex", "level": 1}}, "document_id": "docs/mlindex.md1"}
{"content": "Title: mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py\n\n# %% Pre-requisites\n# %pip install 'azure-ai-ml==1.10.0a20230825006' --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/\n# %pip install 'azureml-rag[document_parsing,faiss]>=0.2.0'\n# %pip install -U 'promptflow[azure]' promptflow-tools promptflow-vectordb\n\n# %% Get Azure Cognitive Search Connection\nfrom azure.ai.ml import MLClient\nfrom azure.identity import DefaultAzureCredential", "metadata": {"doc_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py0", "chunk_hash": "0d8398ceb0494bc0fe33c99cb52e5c07636d23a773b1cec88d10683ffaa0c39c", "source": {"title": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "filename": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "mtime": 1694042161.5069914, "chunk_id": "0"}, "stats": {"tiktokens": 141, "chars": 505, "lines": 10}}, "document_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py0"}
{"content": "Title: mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py\n\nml_client = MLClient.from_config(credential=DefaultAzureCredential())\n\naoai_connection = ml_client.connections.get(\"azureml-rag-oai\")\n\n# %% Build MLIndex\nfrom azureml.rag.mlindex import MLIndex\n\n# Process data into FAISS Index using Azure OpenAI embeddings\nmlindex_name = \"mlindex_docs_aoai_faiss\"\nmlindex_local_path = f\"./{mlindex_name}\"", "metadata": {"doc_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py1", "chunk_hash": "50b81b344321d16ceadaef8d07d56d875f3c9bd97b92f9935868f8e45dd643d2", "source": {"title": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "filename": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "mtime": 1694042161.5069914, "chunk_id": "1"}, "stats": {"tiktokens": 104, "chars": 406, "lines": 12}}, "document_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py1"}
{"content": "Title: mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py\n\nmlindex = MLIndex.from_files(\n    source_uri='../',\n    source_glob='**/*',\n    chunk_size=200,\n    embeddings_model=\"azure_open_ai://deployment/text-embedding-ada-002/model/text-embedding-ada-002\",\n    embeddings_connection=aoai_connection,\n    embeddings_container=f\"./.embeddings_cache/{mlindex_name}\",\n    index_type=\"faiss\",\n    output_path=mlindex_local_path\n)\n\n# %% Get Promptflow client\nimport promptflow\n\npf = promptflow.PFClient()", "metadata": {"doc_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py2", "chunk_hash": "496d2c219d10bcc289c00506d2de7528eed19c7fa2332288576118c3bdb68f72", "source": {"title": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "filename": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "mtime": 1694042161.5069914, "chunk_id": "2"}, "stats": {"tiktokens": 127, "chars": 508, "lines": 17}}, "document_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py2"}
{"content": "Title: mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py\n\n# %% List all the available connections\nfor c in pf.connections.list():\n    print(c.name + \" (\" + c.type + \")\")\n\n# %% Load index qna flow\nfrom pathlib import Path\n\nflow_path = Path.cwd().parent / \"flows\" / \"chat-with-index\"\n\n\n# %% Run qna flow\noutput = pf.flows.test(\n    flow_path,\n    inputs={\n        \"chat_history\": [],\n        \"mlindex_uri\": str(Path.cwd() / mlindex_local_path),\n        \"question\": \"what is an MLIndex?\",\n    },\n)", "metadata": {"doc_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py3", "chunk_hash": "0b6c68d47e140fbeb968157b870b0fa85733e6cf9ed081b0899def6261c1e572", "source": {"title": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "filename": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "mtime": 1694042161.5069914, "chunk_id": "3"}, "stats": {"tiktokens": 133, "chars": 504, "lines": 21}}, "document_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py3"}
{"content": "Title: mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py\n\nanswer = output[\"answer\"]\nfor part in answer:\n    print(part, end=\"\")\n\nprint(output[\"context\"])\n\n# %% Run qna flow with multiple inputs\ndata_path = Path.cwd().parent / \"flows\" / \"data\" / \"rag_docs_questions.jsonl\"\n\nconfig = {\n    \"CHAT_MODEL_DEPLOYMENT_NAME\": \"gpt-35-turbo\",\n    \"PROMPT_TOKEN_LIMIT\": 2000,\n    \"MAX_COMPLETION_TOKENS\": 256,\n    \"VERBOSE\": True,\n}", "metadata": {"doc_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py4", "chunk_hash": "6cdf46707eac77ffedb98f4897dd9feb2080e3165402125a90c236b9ba67e31c", "source": {"title": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "filename": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "mtime": 1694042161.5069914, "chunk_id": "4"}, "stats": {"tiktokens": 126, "chars": 432, "lines": 17}}, "document_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py4"}
{"content": "Title: mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py\n\ncolumn_mapping = {\n    \"chat_history\": \"${data.chat_history}\",\n    \"mlindex_uri\": str(Path.cwd() / mlindex_local_path,),\n    \"question\": \"${data.chat_input}\",\n    \"answer\": \"${data.answer}\",\n    \"config\": config,\n}\nrun = pf.run(flow=flow_path, data=data_path, column_mapping=column_mapping)\npf.stream(run)\n\nprint(f\"{run}\")\n\n# %%", "metadata": {"doc_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py5", "chunk_hash": "01203b5a21b8f4d84280213cbbb56e0de7d989eec0453512688ce947be4481d5", "source": {"title": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "filename": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py", "mtime": 1694042161.5069914, "chunk_id": "5"}, "stats": {"tiktokens": 102, "chars": 396, "lines": 15}}, "document_id": "mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py5"}
{"content": "Title: mlindex_local/langchain_docs_to_mlindex.py\n\n# %%[markdown]\n# # Build an ACS Index using langchain data loaders and MLIndex SDK\n\n# %% Pre-requisites\n# %pip install 'azure-ai-ml==1.10.0a20230825006' --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/\n# %pip install 'azureml-rag[cognitive_search]>=0.2.0'\n# %pip install wikipedia\n\n# %% Get Azure Cognitive Search Connection\nfrom azure.ai.ml import MLClient\nfrom azure.identity import DefaultAzureCredential", "metadata": {"doc_id": "mlindex_local/langchain_docs_to_mlindex.py0", "chunk_hash": "958f4e3e6a0a3583993f38240791d2508eef4f6286b615031e34b5b30d4f2236", "source": {"title": "mlindex_local/langchain_docs_to_mlindex.py", "filename": "mlindex_local/langchain_docs_to_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/langchain_docs_to_mlindex.py", "mtime": 1694042161.498898, "chunk_id": "0"}, "stats": {"tiktokens": 137, "chars": 516, "lines": 13}}, "document_id": "mlindex_local/langchain_docs_to_mlindex.py0"}
{"content": "Title: mlindex_local/langchain_docs_to_mlindex.py\n\nml_client = MLClient.from_config(credential=DefaultAzureCredential(), path=\"config.json\")\n\nacs_connection = ml_client.connections.get(\"azureml-rag-acs\")\naoai_connection = ml_client.connections.get(\"azureml-rag-oai\")\n\n# %% https://python.langchain.com/en/latest/modules/indexes/document_loaders/examples/wikipedia.html\nfrom langchain.document_loaders import WikipediaLoader\n\ndocs = WikipediaLoader(query='HUNTER X HUNTER', load_max_docs=10).load()\nlen(docs)\n\n# %%\nfrom langchain.text_splitter import MarkdownTextSplitter", "metadata": {"doc_id": "mlindex_local/langchain_docs_to_mlindex.py1", "chunk_hash": "c1b0009b125f63cfd599e2b030230c6e8e71e52cf607013f275b5f4120cfc893", "source": {"title": "mlindex_local/langchain_docs_to_mlindex.py", "filename": "mlindex_local/langchain_docs_to_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/langchain_docs_to_mlindex.py", "mtime": 1694042161.498898, "chunk_id": "1"}, "stats": {"tiktokens": 132, "chars": 570, "lines": 15}}, "document_id": "mlindex_local/langchain_docs_to_mlindex.py1"}
{"content": "Title: mlindex_local/langchain_docs_to_mlindex.py\n\nsplit_docs = MarkdownTextSplitter.from_tiktoken_encoder(chunk_size=1024).split_documents(docs)\n\n# %%\nfrom azureml.rag.mlindex import MLIndex", "metadata": {"doc_id": "mlindex_local/langchain_docs_to_mlindex.py2", "chunk_hash": "11a52f4bfdc900d214fd3da6998c7f3914c44f276f3aba2b2113bd0f834acc4f", "source": {"title": "mlindex_local/langchain_docs_to_mlindex.py", "filename": "mlindex_local/langchain_docs_to_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/langchain_docs_to_mlindex.py", "mtime": 1694042161.498898, "chunk_id": "2"}, "stats": {"tiktokens": 47, "chars": 191, "lines": 6}}, "document_id": "mlindex_local/langchain_docs_to_mlindex.py2"}
{"content": "Title: mlindex_local/langchain_docs_to_mlindex.py\n\n# Process data into FAISS Index using HuggingFace embeddings\nmlindex = MLIndex.from_documents(\n    documents=split_docs,\n    embeddings_model=\"azure_open_ai://deployment/text-embedding-ada-002/model/text-embedding-ada-002\",\n    embeddings_connection=aoai_connection,\n    embeddings_container=\"./.embeddings_cache/hunter_x_hunter_aoai_acs\",\n    index_type='acs',\n    index_connection=acs_connection,\n    index_config={\n        'index_name': 'hunter_x_hunter_aoai_acs'\n    }\n)", "metadata": {"doc_id": "mlindex_local/langchain_docs_to_mlindex.py3", "chunk_hash": "5951cc376954b9ced94c6523542c60daa745e92cecb8316329653d6601ead329", "source": {"title": "mlindex_local/langchain_docs_to_mlindex.py", "filename": "mlindex_local/langchain_docs_to_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/langchain_docs_to_mlindex.py", "mtime": 1694042161.498898, "chunk_id": "3"}, "stats": {"tiktokens": 128, "chars": 525, "lines": 14}}, "document_id": "mlindex_local/langchain_docs_to_mlindex.py3"}
{"content": "Title: mlindex_local/langchain_docs_to_mlindex.py\n\n# %% Query documents, use with inferencing framework\nindex = mlindex.as_langchain_vectorstore()\ndocs = index.similarity_search('What is bungie gum?', k=5)\nprint(docs)", "metadata": {"doc_id": "mlindex_local/langchain_docs_to_mlindex.py4", "chunk_hash": "56db54c623b8e3c1ae37807bce7eae84de2e2a3e2f34dfc156472fc3ee6ee908", "source": {"title": "mlindex_local/langchain_docs_to_mlindex.py", "filename": "mlindex_local/langchain_docs_to_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/langchain_docs_to_mlindex.py", "mtime": 1694042161.498898, "chunk_id": "4"}, "stats": {"tiktokens": 55, "chars": 217, "lines": 6}}, "document_id": "mlindex_local/langchain_docs_to_mlindex.py4"}
{"content": "Title: mlindex_local/local_docs_to_faiss_mlindex.py\n\n# %%[markdown]\n# # Build a Faiss Index using MLIndex SDK\n\n# %% Pre-requisites\n# %pip install 'azure-ai-ml==1.10.0a20230825006' --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/\n# %pip install 'azureml-rag[document_parsing,faiss,hugging_face]>=0.2.0'\n\n# %%\nfrom azureml.rag.mlindex import MLIndex", "metadata": {"doc_id": "mlindex_local/local_docs_to_faiss_mlindex.py0", "chunk_hash": "59a49620fe7fec28b90127de4542fe93a7e5412f48a8bbbf47479a1f5637379d", "source": {"title": "mlindex_local/local_docs_to_faiss_mlindex.py", "filename": "mlindex_local/local_docs_to_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_faiss_mlindex.py", "mtime": 1694042161.505718, "chunk_id": "0"}, "stats": {"tiktokens": 124, "chars": 405, "lines": 11}}, "document_id": "mlindex_local/local_docs_to_faiss_mlindex.py0"}
{"content": "Title: mlindex_local/local_docs_to_faiss_mlindex.py\n\n# Process data into FAISS Index using HuggingFace embeddings\nmlindex = MLIndex.from_files(\n    source_uri='../',\n    source_glob='**/*',\n    chunk_size=200,\n    #embeddings_model=sentence_transformers.SentenceTransformer('sentence-transformers/all-mpnet-base-v2'),\n    embeddings_model=\"hugging_face://model/sentence-transformers/all-mpnet-base-v2\",\n    embeddings_container=\"./.embeddings_cache/mlindex_docs_mpnet_faiss\",\n    index_type='faiss'\n)", "metadata": {"doc_id": "mlindex_local/local_docs_to_faiss_mlindex.py1", "chunk_hash": "da63b569523335b36c4bbd82abd5ba5a41ab2409f58c089e97f8d2c003f5e152", "source": {"title": "mlindex_local/local_docs_to_faiss_mlindex.py", "filename": "mlindex_local/local_docs_to_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_faiss_mlindex.py", "mtime": 1694042161.505718, "chunk_id": "1"}, "stats": {"tiktokens": 122, "chars": 500, "lines": 12}}, "document_id": "mlindex_local/local_docs_to_faiss_mlindex.py1"}
{"content": "Title: mlindex_local/local_docs_to_faiss_mlindex.py\n\n# %% Query documents, use with inferencing framework\nindex = mlindex.as_langchain_vectorstore()\ndocs = index.similarity_search('Topic in my data.', k=5)\nprint(docs)\n\n# %% Save for later\nmlindex.save('./different_index_path')\nmlindex = MLIndex('./different_index_path')", "metadata": {"doc_id": "mlindex_local/local_docs_to_faiss_mlindex.py2", "chunk_hash": "42924bd1648118b119006e96b8d36f8ccdc74a2bfda8d1d73cfefecf67edada5", "source": {"title": "mlindex_local/local_docs_to_faiss_mlindex.py", "filename": "mlindex_local/local_docs_to_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_faiss_mlindex.py", "mtime": 1694042161.505718, "chunk_id": "2"}, "stats": {"tiktokens": 78, "chars": 321, "lines": 10}}, "document_id": "mlindex_local/local_docs_to_faiss_mlindex.py2"}
{"content": "Title: mlindex_local/local_docs_to_acs_aoai_mlindex.py\n\n# %%[markdown]\n# # Build an ACS Index using MLIndex SDK\n\n# %% Pre-requisites\n# %pip install 'azure-ai-ml==1.10.0a20230825006' --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/\n# %pip install 'azureml-rag[document_parsing,cognitive_search]>=0.2.0'\n\n# %% Get Azure Cognitive Search Connection\nfrom azure.ai.ml import MLClient\nfrom azure.identity import DefaultAzureCredential", "metadata": {"doc_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py0", "chunk_hash": "0c11b5e98b629009fa732bfddd27386a10523b537ca9f6e883968020e08cdc97", "source": {"title": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "filename": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_acs_aoai_mlindex.py", "mtime": 1694042161.5016007, "chunk_id": "0"}, "stats": {"tiktokens": 134, "chars": 486, "lines": 12}}, "document_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py0"}
{"content": "Title: mlindex_local/local_docs_to_acs_aoai_mlindex.py\n\nml_client = MLClient.from_config(credential=DefaultAzureCredential())\n\nacs_connection = ml_client.connections.get(\"azureml-rag-acs\")\naoai_connection = ml_client.connections.get(\"azureml-rag-oai\")\n\n# %%\nfrom azureml.rag.mlindex import MLIndex", "metadata": {"doc_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py1", "chunk_hash": "96d276e615b01589572c26f84ab1c5ec6eeb78f3ab81d1f4511bed171b50e2b6", "source": {"title": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "filename": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_acs_aoai_mlindex.py", "mtime": 1694042161.5016007, "chunk_id": "1"}, "stats": {"tiktokens": 74, "chars": 297, "lines": 9}}, "document_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py1"}
{"content": "Title: mlindex_local/local_docs_to_acs_aoai_mlindex.py\n\n# Process data into FAISS Index using HuggingFace embeddings\nmlindex = MLIndex.from_files(\n    source_uri='../',\n    source_glob='**/*',\n    chunk_size=200,\n    embeddings_model=\"azure_open_ai://deployment/text-embedding-ada-002/model/text-embedding-ada-002\",\n    embeddings_connection=aoai_connection,\n    embeddings_container=\"./.embeddings_cache/mlindex_docs_aoai_acs\",\n    index_type='acs',\n    index_connection=acs_connection,\n    index_config={", "metadata": {"doc_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py2", "chunk_hash": "6266450293c3242966de7265cff621fad3c626eeab69800cd85ef41361a2b639", "source": {"title": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "filename": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_acs_aoai_mlindex.py", "mtime": 1694042161.5016007, "chunk_id": "2"}, "stats": {"tiktokens": 123, "chars": 506, "lines": 13}}, "document_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py2"}
{"content": "Title: mlindex_local/local_docs_to_acs_aoai_mlindex.py\n\n'index_name': 'mlindex_docs_aoai_acs'\n    },\n    output_path=\"./acs_open_ai_index\"\n)", "metadata": {"doc_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py3", "chunk_hash": "1c8c6bf82e3d721df0e439b76837976fdf302d381e0a05d35695b686a6edcead", "source": {"title": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "filename": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_acs_aoai_mlindex.py", "mtime": 1694042161.5016007, "chunk_id": "3"}, "stats": {"tiktokens": 43, "chars": 140, "lines": 6}}, "document_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py3"}
{"content": "Title: mlindex_local/local_docs_to_acs_aoai_mlindex.py\n\n# %% Load MLIndex from local\nfrom azureml.rag.mlindex import MLIndex\n\nmlindex = MLIndex(\"./acs_open_ai_index\")\n\n# %% Query documents, use with inferencing framework\nindex = mlindex.as_langchain_vectorstore()\ndocs = index.similarity_search('Topic in my data.', k=5)\nprint(docs)", "metadata": {"doc_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py4", "chunk_hash": "71d248573659180c267cc9f8b85138317d25dae563d6911094682dc90e12e537", "source": {"title": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "filename": "mlindex_local/local_docs_to_acs_aoai_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/mlindex_local/local_docs_to_acs_aoai_mlindex.py", "mtime": 1694042161.5016007, "chunk_id": "4"}, "stats": {"tiktokens": 87, "chars": 332, "lines": 11}}, "document_id": "mlindex_local/local_docs_to_acs_aoai_mlindex.py4"}
{"content": "Title: flows/chat-with-index/chat_with_index_tool.py\n\nfrom promptflow import tool\nfrom chat_with_index.main import chat_with_index\n\n\n@tool\ndef chat_with_index_tool(question: str, mlindex_uri: str, history: list, ready: str):\n    history = convert_chat_history_to_chatml_messages(history)\n\n    stream, context = chat_with_index(question, mlindex_uri, history)\n\n    answer = \"\"\n    for str in stream:\n        answer = answer + str + \"\"\n\n    return {\"answer\": answer, \"context\": context}", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index_tool.py0", "chunk_hash": "52dc7b2605aa60ff7ab4cff5f60f06ef16424ae7a1f1c986146c31d494cb9ccf", "source": {"title": "flows/chat-with-index/chat_with_index_tool.py", "filename": "flows/chat-with-index/chat_with_index_tool.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index_tool.py", "mtime": 1694042161.3906357, "chunk_id": "0"}, "stats": {"tiktokens": 112, "chars": 484, "lines": 17}}, "document_id": "flows/chat-with-index/chat_with_index_tool.py0"}
{"content": "Title: flows/chat-with-index/chat_with_index_tool.py\n\ndef convert_chat_history_to_chatml_messages(history):\n    messages = []\n    for item in history:\n        messages.append({\"role\": \"user\", \"content\": item[\"inputs\"][\"question\"]})\n        messages.append({\"role\": \"assistant\", \"content\": item[\"outputs\"][\"answer\"]})\n\n    return messages", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index_tool.py1", "chunk_hash": "4b5d5ed71c130e7697bdf5a24001ce2fa1ba255211d1f240907bb0db0a21f67b", "source": {"title": "flows/chat-with-index/chat_with_index_tool.py", "filename": "flows/chat-with-index/chat_with_index_tool.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index_tool.py", "mtime": 1694042161.3906357, "chunk_id": "1"}, "stats": {"tiktokens": 73, "chars": 337, "lines": 9}}, "document_id": "flows/chat-with-index/chat_with_index_tool.py1"}
{"content": "Title: flows/chat-with-index/chat_with_index_tool.py\n\ndef convert_chatml_messages_to_chat_history(messages):\n    history = []\n    for i in range(0, len(messages), 2):\n        history.append(\n            {\n                \"inputs\": {\"question\": messages[i][\"content\"]},\n                \"outputs\": {\"answer\": messages[i + 1][\"content\"]},\n            }\n        )\n\n    return history", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index_tool.py2", "chunk_hash": "9af17a3afd9ee52792c4e45cf236410179c43043be4b7a64546b4ffd067fc1f8", "source": {"title": "flows/chat-with-index/chat_with_index_tool.py", "filename": "flows/chat-with-index/chat_with_index_tool.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index_tool.py", "mtime": 1694042161.3906357, "chunk_id": "2"}, "stats": {"tiktokens": 82, "chars": 379, "lines": 13}}, "document_id": "flows/chat-with-index/chat_with_index_tool.py2"}
{"content": "Title: flows/chat-with-index/setup_env.py\n\nimport os\nfrom typing import Union\n\nfrom promptflow import tool\nfrom promptflow.connections import AzureOpenAIConnection, OpenAIConnection\n\n\n@tool", "metadata": {"doc_id": "flows/chat-with-index/setup_env.py0", "chunk_hash": "f958f1090af6508ae3b956535a73d932dcceb3f786e8477e59164a95908ea33e", "source": {"title": "flows/chat-with-index/setup_env.py", "filename": "flows/chat-with-index/setup_env.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/setup_env.py", "mtime": 1694042161.4105766, "chunk_id": "0"}, "stats": {"tiktokens": 40, "chars": 189, "lines": 10}}, "document_id": "flows/chat-with-index/setup_env.py0"}
{"content": "Title: flows/chat-with-index/setup_env.py\n\ndef setup_env(connection: Union[AzureOpenAIConnection, OpenAIConnection], config: dict):\n    if not connection or not config:\n        return\n\n    if isinstance(connection, AzureOpenAIConnection):\n        os.environ[\"OPENAI_API_TYPE\"] = \"azure\"\n        os.environ[\"OPENAI_API_BASE\"] = connection.api_base\n        os.environ[\"OPENAI_API_KEY\"] = connection.api_key\n        os.environ[\"OPENAI_API_VERSION\"] = connection.api_version", "metadata": {"doc_id": "flows/chat-with-index/setup_env.py1", "chunk_hash": "317591f57fd967760295ba4e227a25362e2ce79aae8fb79734b2d101a559356c", "source": {"title": "flows/chat-with-index/setup_env.py", "filename": "flows/chat-with-index/setup_env.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/setup_env.py", "mtime": 1694042161.4105766, "chunk_id": "1"}, "stats": {"tiktokens": 105, "chars": 470, "lines": 11}}, "document_id": "flows/chat-with-index/setup_env.py1"}
{"content": "Title: flows/chat-with-index/setup_env.py\n\nif isinstance(connection, OpenAIConnection):\n        os.environ[\"OPENAI_API_KEY\"] = connection.api_key\n        if connection.organization is not None:\n            os.environ[\"OPENAI_ORG_ID\"] = connection.organization\n\n    for key in config:\n        os.environ[key] = str(config[key])\n\n    return \"Ready\"", "metadata": {"doc_id": "flows/chat-with-index/setup_env.py2", "chunk_hash": "10e8fe46986136a443763ebab847d66516816b420d1bc99de052aac0282ef346", "source": {"title": "flows/chat-with-index/setup_env.py", "filename": "flows/chat-with-index/setup_env.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/setup_env.py", "mtime": 1694042161.4105766, "chunk_id": "2"}, "stats": {"tiktokens": 75, "chars": 346, "lines": 11}}, "document_id": "flows/chat-with-index/setup_env.py2"}
{"content": "Title: flows/chat-with-index/find_context_tool.py\n\nfrom promptflow import tool\nfrom chat_with_index.find_context import find_context\n\n@tool\ndef find_context_tool(question: str, mlindex_uri: str):\n    prompt, documents = find_context(question, mlindex_uri)\n\n    return {\"prompt\": prompt, \"context\": [d.page_content for d in documents]}", "metadata": {"doc_id": "flows/chat-with-index/find_context_tool.py0", "chunk_hash": "b358c212043792e406621f4e3032d2c07ec0d49d9cf45cf64b2eb7f12e557446", "source": {"title": "flows/chat-with-index/find_context_tool.py", "filename": "flows/chat-with-index/find_context_tool.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/find_context_tool.py", "mtime": 1694042161.404148, "chunk_id": "0"}, "stats": {"tiktokens": 76, "chars": 334, "lines": 10}}, "document_id": "flows/chat-with-index/find_context_tool.py0"}
{"content": "Title: PyPDF2\n\nPyPDF2\nazureml-rag[faiss]\nopenai\njinja2\npython-dotenv\ntiktoken\npromptflow[azure]\npromptflow-tools", "metadata": {"doc_id": "flows/chat-with-index/requirements.txt0", "chunk_hash": "0b19faf2807c86f7c799e018c2c611897b836868bcc4ee6af3c6a1a75e1455b7", "source": {"title": "PyPDF2", "filename": "flows/chat-with-index/requirements.txt", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/requirements.txt", "mtime": 1694042161.408507, "chunk_id": "0"}, "stats": {"tiktokens": 41, "chars": 112, "lines": 10}}, "document_id": "flows/chat-with-index/requirements.txt0"}
{"content": "Title: flows/chat-with-index/__init__.py\n\nimport sys\nimport os\n\nsys.path.append(\n    os.path.join(os.path.dirname(os.path.abspath(__file__)), \"chat_with_index\")\n)", "metadata": {"doc_id": "flows/chat-with-index/__init__.py0", "chunk_hash": "e18e4f4bf0f67c2c431f069bb48c84aef7992e7a715ad8c96456fa008f445104", "source": {"title": "flows/chat-with-index/__init__.py", "filename": "flows/chat-with-index/__init__.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/__init__.py", "mtime": 1694042161.323171, "chunk_id": "0"}, "stats": {"tiktokens": 41, "chars": 162, "lines": 8}}, "document_id": "flows/chat-with-index/__init__.py0"}
{"content": "# Chat with MLIndex\n\n# Chat with MLIndex\nThis is a simple flow that allow you to ask questions about the content of an MLIndex and get answers.\nYou can run the flow with a URL to an MLIndex and question as argument.\nWhen you ask a question, it will look up the index to retrieve relevant content and post the question with the relevant content to OpenAI chat model (gpt-3.5-turbo or gpt4) to get an answer.\n\nTools used in this flow\uff1a\n- custom `python` Tool", "metadata": {"doc_id": "flows/chat-with-index/README.md0", "chunk_hash": "9acd4e1087f29b3296c539d0c0aa7bddf60f999d9de2e3c24aa0e5e16d9651e6", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "0"}, "stats": {"tiktokens": 112, "chars": 455, "lines": 9}, "markdown_heading": {"heading": "Chat with MLIndex", "level": 1}}, "document_id": "flows/chat-with-index/README.md0"}
{"content": "# Chat with MLIndex\n\n# Chat with MLIndex\n## Prerequisites\nInstall dependencies:\n```bash\npip install -r requirements.txt\n```", "metadata": {"doc_id": "flows/chat-with-index/README.md1", "chunk_hash": "bdf701b403e9d085b5be18a7bb227003aeedc85edb414aeef93a389725447c00", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "1"}, "stats": {"tiktokens": 30, "chars": 123, "lines": 8}, "markdown_heading": {"heading": "Prerequisites", "level": 2}}, "document_id": "flows/chat-with-index/README.md1"}
{"content": "# Chat with MLIndex\n\n# Chat with MLIndex\n## Get started\n### Create connection in this folder", "metadata": {"doc_id": "flows/chat-with-index/README.md2", "chunk_hash": "757463a5c0da2521037053747633161beb71dbcd82c8a60d127df115eb9c0771", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "2"}, "stats": {"tiktokens": 22, "chars": 92, "lines": 5}, "markdown_heading": {"heading": "Get started", "level": 2}}, "document_id": "flows/chat-with-index/README.md2"}
{"content": "# Chat with MLIndex\n\n```bash\n# create connection needed by flow", "metadata": {"doc_id": "flows/chat-with-index/README.md3", "chunk_hash": "ca6581aa7fa7272b6535ae912bab163958118e99e9827f170f0ef76aea33deb0", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "3"}, "stats": {"tiktokens": 15, "chars": 63, "lines": 4}, "markdown_heading": {"heading": "```bash", "level": 0}}, "document_id": "flows/chat-with-index/README.md3"}
{"content": "# Chat with MLIndex\n\nif pf connection list | grep open_ai_connection; then\n    echo \"open_ai_connection already exists\"\nelse\n    pf connection create --file ./azure_openai.yml --name open_ai_connection --set api_key=<your_api_key> api_base=<your_api_base>\nfi\n```\n### SDK Example", "metadata": {"doc_id": "flows/chat-with-index/README.md4", "chunk_hash": "afae168742ab7d5dd1215fb8532defd077c1d695886becf48c0b122e48973ddc", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "4"}, "stats": {"tiktokens": 68, "chars": 278, "lines": 9}, "markdown_heading": {"heading": "if pf connection list | grep open_ai_connection; then\n    echo \"open_ai_connection already exists\"\nelse\n    pf connection create --file ./azure_openai.yml --name open_ai_connection --set api_key=<your_api_key> api_base=<your_api_base>\nfi\n```", "level": 0}}, "document_id": "flows/chat-with-index/README.md4"}
{"content": "# Chat with MLIndex\n\nRefer to [local_docs_to_faiss_mlindex_with_promptfow.py](../../mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py)\n### CLI Example", "metadata": {"doc_id": "flows/chat-with-index/README.md5", "chunk_hash": "91b48ac62299cb286c00ddecf86649dd0698d2ad0f6c1440cca2e75e65436d5e", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "5"}, "stats": {"tiktokens": 42, "chars": 160, "lines": 4}, "markdown_heading": {"heading": "Refer to [local_docs_to_faiss_mlindex_with_promptfow.py](../../mlindex_local/local_docs_to_faiss_mlindex_with_promptfow.py)", "level": 0}}, "document_id": "flows/chat-with-index/README.md5"}
{"content": "# Chat with MLIndex\n\n```bash\n# test with flow inputs, you need local or remote MLIndex (refer to SDK examples to create them)", "metadata": {"doc_id": "flows/chat-with-index/README.md6", "chunk_hash": "9902a124d81d73316acb83be877cd2e829cd32046fef472950955e0f64a2a467", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "6"}, "stats": {"tiktokens": 31, "chars": 125, "lines": 4}, "markdown_heading": {"heading": "```bash", "level": 0}}, "document_id": "flows/chat-with-index/README.md6"}
{"content": "# Chat with MLIndex\n\npf flow test --flow . --inputs question=\"\" mlindex_uri=\"../../mlindex_local/mlindex_docs_aoai_faiss\"\n# (Optional) create a random run name", "metadata": {"doc_id": "flows/chat-with-index/README.md7", "chunk_hash": "c17843eaf9946d39e7d8608a23385551c698b71437d4146dc7728f18dceee6f0", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "7"}, "stats": {"tiktokens": 41, "chars": 159, "lines": 4}, "markdown_heading": {"heading": "pf flow test --flow . --inputs question=\"\" mlindex_uri=\"../../mlindex_local/mlindex_docs_aoai_faiss\"", "level": 0}}, "document_id": "flows/chat-with-index/README.md7"}
{"content": "# Chat with MLIndex\n\nrun_name=\"doc_questions_\"$(openssl rand -hex 12)\n# run with multiline data, --name is optional", "metadata": {"doc_id": "flows/chat-with-index/README.md8", "chunk_hash": "9d6b0b6b502649fce907b086be56c198f5e828751615f982ac27c8de93424f10", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "8"}, "stats": {"tiktokens": 30, "chars": 115, "lines": 4}, "markdown_heading": {"heading": "run_name=\"doc_questions_\"$(openssl rand -hex 12)", "level": 0}}, "document_id": "flows/chat-with-index/README.md8"}
{"content": "# Chat with MLIndex\n\npf run create --flow . --data ../data/rag_docs_questions.jsonl --stream --column-mapping question='${data.chat_input}' mlindex_uri='../../mlindex_local/mlindex_docs_aoai_faiss' chat_history='${data.chat_history}' config='{\"CHAT_MODEL_DEPLOYMENT_NAME\": \"gpt-35-turbo\", \"PROMPT_TOKEN_LIMIT\": \"2000\", \"MAX_COMPLETION_TOKENS\": \"256\", \"VERBOSE\": \"True\"}' --name $run_name\n# visualize run output details", "metadata": {"doc_id": "flows/chat-with-index/README.md9", "chunk_hash": "50f75c1fb777ac09a92b8c01287c8b41d4f60dc428f0c2995afa24b162a92ad4", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "9"}, "stats": {"tiktokens": 117, "chars": 418, "lines": 4}, "markdown_heading": {"heading": "pf run create --flow . --data ../data/rag_docs_questions.jsonl --stream --column-mapping question='${data.chat_input}' mlindex_uri='../../mlindex_local/mlindex_docs_aoai_faiss' chat_history='${data.chat_history}' config='{\"CHAT_MODEL_DEPLOYMENT_NAME\": \"gpt-35-turbo\", \"PROMPT_TOKEN_LIMIT\": \"2000\", \"MAX_COMPLETION_TOKENS\": \"256\", \"VERBOSE\": \"True\"}' --name $run_name", "level": 0}}, "document_id": "flows/chat-with-index/README.md9"}
{"content": "# Chat with MLIndex\n\npf run visualize --name $run_name\n```\n", "metadata": {"doc_id": "flows/chat-with-index/README.md10", "chunk_hash": "94f3603505647560deb473a53c1ab65dd284ca4177aa6a8d2e531dacb5d913f2", "source": {"title": "Chat with MLIndex", "filename": "flows/chat-with-index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/README.md", "mtime": 1694042161.3168821, "chunk_id": "10"}, "stats": {"tiktokens": 17, "chars": 59, "lines": 4}, "markdown_heading": {"heading": "pf run visualize --name $run_name\n```", "level": 0}}, "document_id": "flows/chat-with-index/README.md10"}
{"content": "Title: flows/chat-with-index/rewrite_question_tool.py\n\nfrom promptflow import tool\nfrom chat_with_index.rewrite_question import rewrite_question\n\n\n@tool\ndef rewrite_question_tool(question: str, history: list, env_ready_signal: str):\n    return rewrite_question(question, history)", "metadata": {"doc_id": "flows/chat-with-index/rewrite_question_tool.py0", "chunk_hash": "3fdaf96e319140f9bdd285a0ca19c89fc45f43f90feb71a7ad7d5b5673badbe9", "source": {"title": "flows/chat-with-index/rewrite_question_tool.py", "filename": "flows/chat-with-index/rewrite_question_tool.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/rewrite_question_tool.py", "mtime": 1694042161.4094908, "chunk_id": "0"}, "stats": {"tiktokens": 58, "chars": 279, "lines": 9}}, "document_id": "flows/chat-with-index/rewrite_question_tool.py0"}
{"content": "Title: flows/chat-with-index/qna_tool.py\n\nfrom promptflow import tool\nfrom chat_with_index.qna import qna\n\n\n@tool\ndef qna_tool(prompt: str, history: list):\n    stream = qna(prompt, convert_chat_history_to_chatml_messages(history))\n\n    answer = \"\"\n    for str in stream:\n        answer = answer + str + \"\"\n\n    return {\"answer\": answer}", "metadata": {"doc_id": "flows/chat-with-index/qna_tool.py0", "chunk_hash": "6a59f5b222f8e5e74a2dc9c4ac0420754ac2cf8dc6454592c24fdfdd8cc6d082", "source": {"title": "flows/chat-with-index/qna_tool.py", "filename": "flows/chat-with-index/qna_tool.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/qna_tool.py", "mtime": 1694042161.4073198, "chunk_id": "0"}, "stats": {"tiktokens": 83, "chars": 336, "lines": 15}}, "document_id": "flows/chat-with-index/qna_tool.py0"}
{"content": "Title: flows/chat-with-index/qna_tool.py\n\ndef convert_chat_history_to_chatml_messages(history):\n    messages = []\n    for item in history:\n        messages.append({\"role\": \"user\", \"content\": item[\"inputs\"][\"question\"]})\n        messages.append({\"role\": \"assistant\", \"content\": item[\"outputs\"][\"answer\"]})\n\n    return messages", "metadata": {"doc_id": "flows/chat-with-index/qna_tool.py1", "chunk_hash": "0ce914677a64f12affa5c0633cd783bc1c6f649212b8c2af99f7c394ba398a86", "source": {"title": "flows/chat-with-index/qna_tool.py", "filename": "flows/chat-with-index/qna_tool.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/qna_tool.py", "mtime": 1694042161.4073198, "chunk_id": "1"}, "stats": {"tiktokens": 72, "chars": 325, "lines": 9}}, "document_id": "flows/chat-with-index/qna_tool.py1"}
{"content": "# Context\n\n\nYou're a smart assistant can answer questions based on provided context and previous conversation history between you and human.\n\nUse the context to answer the question at the end, note that the context has order and importance - e.g. context #1 is more important than #2.\n\nTry as much as you can to answer based on the provided the context, if you cannot derive the answer from the context, you should say you don't know.\nAnswer in the same language as the question.\n\n", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/qna_prompt.md0", "chunk_hash": "98769d6f87afa12af988d4e7c8350a5bae47464bffa0af61735cb8eed0829a29", "source": {"title": "Context", "filename": "flows/chat-with-index/chat_with_index/qna_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/qna_prompt.md", "mtime": 1694042161.3644316, "chunk_id": "0"}, "stats": {"tiktokens": 99, "chars": 481, "lines": 10}, "markdown_heading": {"heading": "flows/chat-with-index/chat_with_index/qna_prompt.md", "level": 0}}, "document_id": "flows/chat-with-index/chat_with_index/qna_prompt.md0"}
{"content": "# Context\n\n# Context\n{% for i, c in context %}", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/qna_prompt.md1", "chunk_hash": "59d1ed64de0a7a5b0d9836273cbbd6dbcfc12eed10ede078e1c0a31ade9e4797", "source": {"title": "Context", "filename": "flows/chat-with-index/chat_with_index/qna_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/qna_prompt.md", "mtime": 1694042161.3644316, "chunk_id": "1"}, "stats": {"tiktokens": 15, "chars": 46, "lines": 4}, "markdown_heading": {"heading": "Context", "level": 1}}, "document_id": "flows/chat-with-index/chat_with_index/qna_prompt.md1"}
{"content": "# Context\n\n# Context\n## Context #{{i+1}}\n{{c.page_content}}\n{% endfor %}", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/qna_prompt.md2", "chunk_hash": "2792cb6f059a2d1fb7c814117bbe561d84e0cf5d6e2c629162040b786ea9936a", "source": {"title": "Context", "filename": "flows/chat-with-index/chat_with_index/qna_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/qna_prompt.md", "mtime": 1694042161.3644316, "chunk_id": "2"}, "stats": {"tiktokens": 24, "chars": 72, "lines": 6}, "markdown_heading": {"heading": "Context {{i+1}}", "level": 2}}, "document_id": "flows/chat-with-index/chat_with_index/qna_prompt.md2"}
{"content": "# Context\n\n# Question\n{{question}}", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/qna_prompt.md3", "chunk_hash": "febc3c3427876644e2bbe395560dbf4e92a0eb4e610e6b7e0d5420e4ce895bf8", "source": {"title": "Context", "filename": "flows/chat-with-index/chat_with_index/qna_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/qna_prompt.md", "mtime": 1694042161.3644316, "chunk_id": "3"}, "stats": {"tiktokens": 9, "chars": 34, "lines": 4}, "markdown_heading": {"heading": "Question", "level": 1}}, "document_id": "flows/chat-with-index/chat_with_index/qna_prompt.md3"}
{"content": "Title: flows/chat-with-index/chat_with_index/rewrite_question.py\n\nfrom jinja2 import Environment, FileSystemLoader\nimport os\nfrom utils.logging import log\nfrom utils.oai import OAIChat, render_with_token_limit", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question.py0", "chunk_hash": "eb9d4dcf43a8bd6e139b872a71c111ade68dc88a5441200682aa3f54db769d7e", "source": {"title": "flows/chat-with-index/chat_with_index/rewrite_question.py", "filename": "flows/chat-with-index/chat_with_index/rewrite_question.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question.py", "mtime": 1694042161.3656738, "chunk_id": "0"}, "stats": {"tiktokens": 46, "chars": 209, "lines": 6}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question.py0"}
{"content": "Title: flows/chat-with-index/chat_with_index/rewrite_question.py\n\ndef rewrite_question(question: str, history: list):\n    template = Environment(\n        loader=FileSystemLoader(os.path.dirname(os.path.abspath(__file__)))\n    ).get_template(\"rewrite_question_prompt.md\")\n    token_limit = int(os.environ[\"PROMPT_TOKEN_LIMIT\"])\n    max_completion_tokens = int(os.environ[\"MAX_COMPLETION_TOKENS\"])", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question.py1", "chunk_hash": "c54ae4eebb30313cd2b16044f00fd5aa2f7726a9c371b92c5950885aad508bcb", "source": {"title": "flows/chat-with-index/chat_with_index/rewrite_question.py", "filename": "flows/chat-with-index/chat_with_index/rewrite_question.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question.py", "mtime": 1694042161.3656738, "chunk_id": "1"}, "stats": {"tiktokens": 85, "chars": 395, "lines": 8}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question.py1"}
{"content": "Title: flows/chat-with-index/chat_with_index/rewrite_question.py\n\n# Try to render the prompt with token limit and reduce the history count if it fails\n    while True:\n        try:\n            prompt = render_with_token_limit(\n                template, token_limit, question=question, history=history\n            )\n            break\n        except ValueError:\n            history = history[:-1]\n            log(f\"Reducing chat history count to {len(history)} to fit token limit\")", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question.py2", "chunk_hash": "605ba6402de3a3c33fe9cc6e99ed58ab5640c85cebabe3b938dd459ba79708ca", "source": {"title": "flows/chat-with-index/chat_with_index/rewrite_question.py", "filename": "flows/chat-with-index/chat_with_index/rewrite_question.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question.py", "mtime": 1694042161.3656738, "chunk_id": "2"}, "stats": {"tiktokens": 96, "chars": 478, "lines": 12}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question.py2"}
{"content": "Title: flows/chat-with-index/chat_with_index/rewrite_question.py\n\nchat = OAIChat()\n    rewritten_question = chat.generate(\n        messages=[{\"role\": \"user\", \"content\": prompt}], max_tokens=max_completion_tokens\n    )\n    log(f\"Rewritten question: {rewritten_question}\")\n\n    return rewritten_question", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question.py3", "chunk_hash": "8794dfd614750e5a3ef4cca78c743a16356551cb7e61d47aaa64a67283b52399", "source": {"title": "flows/chat-with-index/chat_with_index/rewrite_question.py", "filename": "flows/chat-with-index/chat_with_index/rewrite_question.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question.py", "mtime": 1694042161.3656738, "chunk_id": "3"}, "stats": {"tiktokens": 66, "chars": 301, "lines": 9}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question.py3"}
{"content": "Title: flows/chat-with-index/chat_with_index/__init__.py\n\nimport sys\nimport os\n\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/__init__.py0", "chunk_hash": "9f3ce4baa8a8f5074430b41b21439771ca2067d616d71bff36a9099dc66aa08c", "source": {"title": "flows/chat-with-index/chat_with_index/__init__.py", "filename": "flows/chat-with-index/chat_with_index/__init__.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/__init__.py", "mtime": 1694042161.3416657, "chunk_id": "0"}, "stats": {"tiktokens": 33, "chars": 139, "lines": 6}}, "document_id": "flows/chat-with-index/chat_with_index/__init__.py0"}
{"content": "Title: flows/chat-with-index/chat_with_index/qna.py\n\nimport os\n\nfrom utils.oai import OAIChat\n\n\ndef qna(prompt: str, history: list):\n    max_completion_tokens = int(os.environ.get(\"MAX_COMPLETION_TOKENS\"))\n\n    chat = OAIChat()\n    stream = chat.stream(\n        messages=history + [{\"role\": \"user\", \"content\": prompt}],\n        max_tokens=max_completion_tokens,\n    )\n\n    return stream", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/qna.py0", "chunk_hash": "cd1d8bd29a0b8de2cbb0583be212c36e6d11b5d134b8141ae47fb0b405efcf1b", "source": {"title": "flows/chat-with-index/chat_with_index/qna.py", "filename": "flows/chat-with-index/chat_with_index/qna.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/qna.py", "mtime": 1694042161.356671, "chunk_id": "0"}, "stats": {"tiktokens": 94, "chars": 386, "lines": 17}}, "document_id": "flows/chat-with-index/chat_with_index/qna.py0"}
{"content": "# Chat with Index\n\n# Chat with Index\nThis is a simple Python application that allow you to ask questions about the content of an MLIndex and get answers.\nIt's a console application that you start with a URI to an MLINdex as argument. When you ask a question, it will look up the index to retrieve relevant content and post the question with the relevant content to OpenAI chat model (gpt-3.5-turbo or gpt4) to get an answer.", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/README.md0", "chunk_hash": "d3fc7186a98e8e41fdd06c2c670f24a2b606037324b0b6e31fbf233c195e4b32", "source": {"title": "Chat with Index", "filename": "flows/chat-with-index/chat_with_index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/README.md", "mtime": 1694042161.3361104, "chunk_id": "0"}, "stats": {"tiktokens": 101, "chars": 424, "lines": 5}, "markdown_heading": {"heading": "Chat with Index", "level": 1}}, "document_id": "flows/chat-with-index/chat_with_index/README.md0"}
{"content": "# Chat with Index\n\n# Chat with Index\n## How it works?\n## Get started", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/README.md1", "chunk_hash": "8a5f488fef42b7724159a49a71630974b3b87c683184130bfc54999c9db684bc", "source": {"title": "Chat with Index", "filename": "flows/chat-with-index/chat_with_index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/README.md", "mtime": 1694042161.3361104, "chunk_id": "1"}, "stats": {"tiktokens": 18, "chars": 68, "lines": 5}, "markdown_heading": {"heading": "How it works?", "level": 2}}, "document_id": "flows/chat-with-index/chat_with_index/README.md1"}
{"content": "# Chat with Index\n\n# Chat with Index\n## How it works?\n### Create .env file in this folder with below content\n```\nOPENAI_API_BASE=<AOAI_endpoint>\nOPENAI_API_KEY=<AOAI_key>\nCHAT_MODEL_DEPLOYMENT_NAME=gpt-35-turbo\nPROMPT_TOKEN_LIMIT=3000\nMAX_COMPLETION_TOKENS=256\nVERBOSE=false\n```\nNote: CHAT_MODEL_DEPLOYMENT_NAME should point to a chat model like gpt-3.5-turbo or gpt-4", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/README.md2", "chunk_hash": "1727bc8881cb679777f607952607e90cc42b0c39127738787fdb89b37d084055", "source": {"title": "Chat with Index", "filename": "flows/chat-with-index/chat_with_index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/README.md", "mtime": 1694042161.3361104, "chunk_id": "2"}, "stats": {"tiktokens": 114, "chars": 368, "lines": 14}, "markdown_heading": {"heading": "Create .env file in this folder with below content", "level": 3}}, "document_id": "flows/chat-with-index/chat_with_index/README.md2"}
{"content": "# Chat with Index\n\n# Chat with Index\n## How it works?\n### Run the command line\n```shell\npython main.py <uri-to-mlindex>\n```", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/README.md3", "chunk_hash": "b2c1ed1f3c928d64e96e5b5be60f70796519b8aca81ed10f40ccce7d7dd710d6", "source": {"title": "Chat with Index", "filename": "flows/chat-with-index/chat_with_index/README.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/README.md", "mtime": 1694042161.3361104, "chunk_id": "3"}, "stats": {"tiktokens": 35, "chars": 123, "lines": 8}, "markdown_heading": {"heading": "Run the command line", "level": 3}}, "document_id": "flows/chat-with-index/chat_with_index/README.md3"}
{"content": "# Example 1\n\n\nYou are able to reason from previous conversation and the recent question, to come up with a rewrite of the question which is concise but with enough information that people without knowledge of previous conversation can understand the question.\n\nA few examples:\n\n", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md0", "chunk_hash": "72a343bcd4bcadc0381245d7ed32663f9840decb24d959ffc1a02ecf675b5f38", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "0"}, "stats": {"tiktokens": 50, "chars": 278, "lines": 7}, "markdown_heading": {"heading": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "level": 0}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md0"}
{"content": "# Example 1\n\n# Example 1\n## Previous conversation", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md1", "chunk_hash": "2afa23771accaee622e49df8706705816dff0485ad26d4004d0fd7fd3095eb5e", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "1"}, "stats": {"tiktokens": 13, "chars": 49, "lines": 4}, "markdown_heading": {"heading": "Example 1", "level": 1}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md1"}
{"content": "# Example 1\n\nuser: Who is Bill Clinton?\nassistant: Bill Clinton is an American politician who served as the 42nd President of the United States from 1993 to 2001.\n## Question", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md2", "chunk_hash": "5809865b2221d039448d716b9c352c2affe3520c6d92da1a399f6adda3781ae7", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "2"}, "stats": {"tiktokens": 43, "chars": 174, "lines": 5}, "markdown_heading": {"heading": "user: Who is Bill Clinton?\nassistant: Bill Clinton is an American politician who served as the 42nd President of the United States from 1993 to 2001.", "level": 0}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md2"}
{"content": "# Example 1\n\nuser: When was he born?\n## Rewritten question", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md3", "chunk_hash": "93adcade449127dcae67371c282bbc3d36c1ca5dcd5f7d78460edd46cdc7c797", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "3"}, "stats": {"tiktokens": 16, "chars": 58, "lines": 4}, "markdown_heading": {"heading": "user: When was he born?", "level": 0}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md3"}
{"content": "# Example 1\n\nWhen was Bill Clinton born?\n# Example 2", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md4", "chunk_hash": "823435f0f44a2607bf244da031f486af88732f7ad399fffb5e5c4723abc19369", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "4"}, "stats": {"tiktokens": 15, "chars": 52, "lines": 4}, "markdown_heading": {"heading": "When was Bill Clinton born?", "level": 0}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md4"}
{"content": "# Example 1\n\nWhen was Bill Clinton born?\n## Previous conversation\nuser: What is BERT?\nassistant: BERT stands for \"Bidirectional Encoder Representations from Transformers.\" It is a natural language processing (NLP) model developed by Google. \nuser: What data was used for its training?\nassistant: The BERT (Bidirectional Encoder Representations from Transformers) model was trained on a large corpus of publicly available text from the internet. It was trained on a combination of books, articles, websites, and other sources to learn the language patterns and relationships between words.", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md5", "chunk_hash": "04fa09fa8903077a3115380e27af5e4dba0d6322b74b1504d169828031d40938", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "5"}, "stats": {"tiktokens": 118, "chars": 588, "lines": 8}, "markdown_heading": {"heading": "Previous conversation", "level": 2}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md5"}
{"content": "# Example 1\n\nWhen was Bill Clinton born?\n## Question\nuser: What NLP tasks can it perform well?", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md6", "chunk_hash": "8b47e8eae1713a15b822b6c412f4ce57a4ba1f1d55fbff54240f2e8187a890aa", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "6"}, "stats": {"tiktokens": 25, "chars": 94, "lines": 5}, "markdown_heading": {"heading": "Question", "level": 2}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md6"}
{"content": "# Example 1\n\nWhen was Bill Clinton born?\n## Rewritten question\nWhat NLP tasks can BERT perform well?\n\nNow comes the actual work - please respond with the rewritten question in the same language as the question, nothing else.", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md7", "chunk_hash": "7527d2f1eec64ac56661ecd4027062f9efe9ec367bf65972af8d15c485c66466", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "7"}, "stats": {"tiktokens": 49, "chars": 224, "lines": 7}, "markdown_heading": {"heading": "Rewritten question", "level": 2}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md7"}
{"content": "# Example 1\n\nWhen was Bill Clinton born?\n## Previous conversation\n{% for item in history %}\n{{item[\"role\"]}}: {{item[\"content\"]}}\n{% endfor %}", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md8", "chunk_hash": "eb8d055f36392caf563360b7f2844689fd05a5a58855628cfa9d36a85f0b21a3", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "8"}, "stats": {"tiktokens": 39, "chars": 142, "lines": 7}, "markdown_heading": {"heading": "Previous conversation", "level": 2}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md8"}
{"content": "# Example 1\n\nWhen was Bill Clinton born?\n## Question\n{{question}}", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md9", "chunk_hash": "d8efe43628e5fa8dfe6f4369e27fd8537747e913b78bd72315d42abe2af7906f", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "9"}, "stats": {"tiktokens": 17, "chars": 65, "lines": 5}, "markdown_heading": {"heading": "Question", "level": 2}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md9"}
{"content": "# Example 1\n\nWhen was Bill Clinton born?\n## Rewritten question\n", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md10", "chunk_hash": "6d832f0499031b1351c5a6352463e93742f33fb24446c0200aeeec0d3b443d0f", "source": {"title": "Example 1", "filename": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/rewrite_question_prompt.md", "mtime": 1694042161.367573, "chunk_id": "10"}, "stats": {"tiktokens": 16, "chars": 63, "lines": 4}, "markdown_heading": {"heading": "Rewritten question", "level": 2}}, "document_id": "flows/chat-with-index/chat_with_index/rewrite_question_prompt.md10"}
{"content": "Title: flows/chat-with-index/chat_with_index/main.py\n\nimport argparse\nfrom dotenv import load_dotenv\nimport os\n\nfrom qna import qna\nfrom find_context import find_context\nfrom rewrite_question import rewrite_question\n# from build_index import create_faiss_index\n# from utils.lock import acquire_lock", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/main.py0", "chunk_hash": "8d10b82e503cfea427094e442d4c98777e506a6261b0721d779c44b895127044", "source": {"title": "flows/chat-with-index/chat_with_index/main.py", "filename": "flows/chat-with-index/chat_with_index/main.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/main.py", "mtime": 1694042161.353455, "chunk_id": "0"}, "stats": {"tiktokens": 63, "chars": 298, "lines": 11}}, "document_id": "flows/chat-with-index/chat_with_index/main.py0"}
{"content": "Title: flows/chat-with-index/chat_with_index/main.py\n\ndef chat_with_index(question: str, mlindex_uri: str, history: list):\n    # with acquire_lock(\"create_folder.lock\"):\n    #     if not os.path.exists(\".mlindex\"):\n    #         os.makedirs(\".mlindex\")\n\n    # index_path = create_faiss_index(pdf_path)\n    q = rewrite_question(question, history)\n    prompt, context = find_context(q, mlindex_uri)\n    stream = qna(prompt, history)\n\n    return stream, context", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/main.py1", "chunk_hash": "f77661c353153b460ed8e4ad8d506d10d769d30e741e7ee2ba910bdc24a9576e", "source": {"title": "flows/chat-with-index/chat_with_index/main.py", "filename": "flows/chat-with-index/chat_with_index/main.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/main.py", "mtime": 1694042161.353455, "chunk_id": "1"}, "stats": {"tiktokens": 109, "chars": 458, "lines": 13}}, "document_id": "flows/chat-with-index/chat_with_index/main.py1"}
{"content": "Title: flows/chat-with-index/chat_with_index/main.py\n\ndef print_stream_and_return_full_answer(stream):\n    answer = \"\"\n    for str in stream:\n        print(str, end=\"\", flush=True)\n        answer = answer + str + \"\"\n    print(flush=True)\n\n    return answer", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/main.py2", "chunk_hash": "f7b4caff578c21d3aec8d6ca8cb2d3bd144397fa962602bf80dd71bed51919a0", "source": {"title": "flows/chat-with-index/chat_with_index/main.py", "filename": "flows/chat-with-index/chat_with_index/main.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/main.py", "mtime": 1694042161.353455, "chunk_id": "2"}, "stats": {"tiktokens": 57, "chars": 256, "lines": 10}}, "document_id": "flows/chat-with-index/chat_with_index/main.py2"}
{"content": "Title: flows/chat-with-index/chat_with_index/main.py\n\ndef main_loop(mlindex_uri: str):\n    load_dotenv(os.path.join(os.path.dirname(__file__), \"..\", \".env\"))\n\n    history = []\n    while True:\n        question = input(\"\\033[92m\" + \"$User (type q! to quit): \" + \"\\033[0m\")\n        if question == \"q!\":\n            break\n\n        stream, context = chat_with_index(question, mlindex_uri, history)", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/main.py3", "chunk_hash": "5684f8117bbf618472b1fe45c1339096f3bd1be3922cbd860ca6dd5a819e8a0f", "source": {"title": "flows/chat-with-index/chat_with_index/main.py", "filename": "flows/chat-with-index/chat_with_index/main.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/main.py", "mtime": 1694042161.353455, "chunk_id": "3"}, "stats": {"tiktokens": 102, "chars": 392, "lines": 12}}, "document_id": "flows/chat-with-index/chat_with_index/main.py3"}
{"content": "Title: flows/chat-with-index/chat_with_index/main.py\n\nprint(\"\\033[92m\" + \"$Bot: \" + \"\\033[0m\", end=\" \", flush=True)\n        answer = print_stream_and_return_full_answer(stream)\n        history = history + [\n            {\"role\": \"user\", \"content\": question},\n            {\"role\": \"assistant\", \"content\": answer},\n        ]", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/main.py4", "chunk_hash": "b82019738f347c7b70a88f047fb5ff1aa8e577a6ec2c84f35956ea77121c7d61", "source": {"title": "flows/chat-with-index/chat_with_index/main.py", "filename": "flows/chat-with-index/chat_with_index/main.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/main.py", "mtime": 1694042161.353455, "chunk_id": "4"}, "stats": {"tiktokens": 80, "chars": 321, "lines": 8}}, "document_id": "flows/chat-with-index/chat_with_index/main.py4"}
{"content": "Title: flows/chat-with-index/chat_with_index/main.py\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Ask questions about the contents of an MLIndex.\")\n    parser.add_argument(\"mlindex_uri\", help=\"URI to MLIndex\")\n    args = parser.parse_args()\n\n    main_loop(args.mlindex_uri)\n\n\nif __name__ == \"__main__\":\n    main()", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/main.py5", "chunk_hash": "c48b1bc9c4508919a8f4f288bb5fa16f99e73bbc01964b58bc28fc25fc19c5d7", "source": {"title": "flows/chat-with-index/chat_with_index/main.py", "filename": "flows/chat-with-index/chat_with_index/main.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/main.py", "mtime": 1694042161.353455, "chunk_id": "5"}, "stats": {"tiktokens": 74, "chars": 331, "lines": 12}}, "document_id": "flows/chat-with-index/chat_with_index/main.py5"}
{"content": "Title: flows/chat-with-index/chat_with_index/find_context.py\n\nfrom jinja2 import Environment, FileSystemLoader\nimport os\n\nfrom utils.oai import render_with_token_limit\nfrom utils.logging import log\n\nfrom azureml.rag.mlindex import MLIndex", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/find_context.py0", "chunk_hash": "3e0b952f1fbf228e6de59bbd91d775dedc0a6d0bd177bfa973596eebf53c5e24", "source": {"title": "flows/chat-with-index/chat_with_index/find_context.py", "filename": "flows/chat-with-index/chat_with_index/find_context.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/find_context.py", "mtime": 1694042161.3444278, "chunk_id": "0"}, "stats": {"tiktokens": 52, "chars": 238, "lines": 9}}, "document_id": "flows/chat-with-index/chat_with_index/find_context.py0"}
{"content": "Title: flows/chat-with-index/chat_with_index/find_context.py\n\ndef find_context(question: str, index_path: str):\n    mlindex = MLIndex(index_path)\n    index = mlindex.as_native_index_client()\n    snippets = index.similarity_search(question, k=5)\n\n    template = Environment(\n        loader=FileSystemLoader(os.path.dirname(os.path.abspath(__file__)))\n    ).get_template(\"qna_prompt.md\")\n    token_limit = int(os.environ.get(\"PROMPT_TOKEN_LIMIT\"))", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/find_context.py1", "chunk_hash": "c6d4b8d5b95845a42052ac31dc1a920103e473bf611c226664b959dd45f5b84a", "source": {"title": "flows/chat-with-index/chat_with_index/find_context.py", "filename": "flows/chat-with-index/chat_with_index/find_context.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/find_context.py", "mtime": 1694042161.3444278, "chunk_id": "1"}, "stats": {"tiktokens": 102, "chars": 445, "lines": 11}}, "document_id": "flows/chat-with-index/chat_with_index/find_context.py1"}
{"content": "Title: flows/chat-with-index/chat_with_index/find_context.py\n\n# Try to render the template with token limit and reduce snippet count if it fails\n    while True:\n        try:\n            prompt = render_with_token_limit(\n                template, token_limit, question=question, context=enumerate(snippets)\n            )\n            break\n        except ValueError:\n            snippets = snippets[:-1]\n            log(f\"Reducing snippet count to {len(snippets)} to fit token limit\")", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/find_context.py2", "chunk_hash": "cfff9e34e163ae7b970f3c15d60c73c1fe4efcc8064e3ba7b81b1681990a2379", "source": {"title": "flows/chat-with-index/chat_with_index/find_context.py", "filename": "flows/chat-with-index/chat_with_index/find_context.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/find_context.py", "mtime": 1694042161.3444278, "chunk_id": "2"}, "stats": {"tiktokens": 96, "chars": 482, "lines": 12}}, "document_id": "flows/chat-with-index/chat_with_index/find_context.py2"}
{"content": "Title: flows/chat-with-index/chat_with_index/find_context.py\n\nreturn prompt, snippets", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/find_context.py3", "chunk_hash": "40444b4d8ab92c8bf524023e417541079ddb0aa9f56d74661742832d3fc6c52d", "source": {"title": "flows/chat-with-index/chat_with_index/find_context.py", "filename": "flows/chat-with-index/chat_with_index/find_context.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/find_context.py", "mtime": 1694042161.3444278, "chunk_id": "3"}, "stats": {"tiktokens": 17, "chars": 85, "lines": 3}}, "document_id": "flows/chat-with-index/chat_with_index/find_context.py3"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/logging.py\n\nimport os\n\n\ndef log(message: str):\n    verbose = os.environ.get(\"VERBOSE\")\n    if verbose.lower() == \"true\":\n        print(message, flush=True)", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/logging.py0", "chunk_hash": "8660b0a7ba4b74fd2f3c1fe708ddfccd26c51430e98c7157bb20ec166a7e87ab", "source": {"title": "flows/chat-with-index/chat_with_index/utils/logging.py", "filename": "flows/chat-with-index/chat_with_index/utils/logging.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/logging.py", "mtime": 1694042161.3776937, "chunk_id": "0"}, "stats": {"tiktokens": 47, "chars": 206, "lines": 9}}, "document_id": "flows/chat-with-index/chat_with_index/utils/logging.py0"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/__init__.py\n\n__path__ = __import__(\"pkgutil\").extend_path(__path__, __name__)  # type: ignore", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/__init__.py0", "chunk_hash": "d179fe2a4c0ca66d1e8cfe49c148cbc5e66a0276e913df649e6fb123a306e48c", "source": {"title": "flows/chat-with-index/chat_with_index/utils/__init__.py", "filename": "flows/chat-with-index/chat_with_index/utils/__init__.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/__init__.py", "mtime": 1694042161.374285, "chunk_id": "0"}, "stats": {"tiktokens": 38, "chars": 144, "lines": 3}}, "document_id": "flows/chat-with-index/chat_with_index/utils/__init__.py0"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nfrom typing import List\nimport openai\nimport os\nimport tiktoken\nfrom jinja2 import Template\n\nfrom .retry import (\n    retry_and_handle_exceptions,\n    retry_and_handle_exceptions_for_generator,\n)\nfrom .logging import log", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py0", "chunk_hash": "74b3fd4a194e1b43e99c448155db0c19f503e8b7581f53ba8d8c69a5d94b2d4b", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "0"}, "stats": {"tiktokens": 62, "chars": 279, "lines": 13}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py0"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\ndef extract_delay_from_rate_limit_error_msg(text):\n    import re\n\n    pattern = r\"retry after (\\d+)\"\n    match = re.search(pattern, text)\n    if match:\n        retry_time_from_message = match.group(1)\n        return float(retry_time_from_message)\n    else:\n        return 5  # default retry time", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py1", "chunk_hash": "7b040f731daa6486463361aaa42515f9a6772f4ced6047aa25c61cfecc37f0e8", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "1"}, "stats": {"tiktokens": 84, "chars": 354, "lines": 12}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py1"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nclass OAI:\n    def __init__(self):\n        if os.getenv(\"OPENAI_API_TYPE\") is not None:\n            openai.api_type = os.getenv(\"OPENAI_API_TYPE\")\n        if os.getenv(\"OPENAI_API_BASE\") is not None:\n            openai.api_base = os.environ.get(\"OPENAI_API_BASE\")\n        if os.getenv(\"OPENAI_API_VERSION\") is not None:", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py2", "chunk_hash": "d2932d7c977a79ad371eda2fe2c45388b0bb53378b85c9146832680d72126ee0", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "2"}, "stats": {"tiktokens": 96, "chars": 378, "lines": 9}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py2"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nopenai.api_version = os.environ.get(\"OPENAI_API_VERSION\")\n        if os.getenv(\"OPENAI_ORG_ID\") is not None:\n            openai.organization = os.environ.get(\"OPENAI_ORG_ID\")\n        if os.getenv(\"OPENAI_API_KEY\") is None:\n            raise ValueError(\"OPENAI_API_KEY is not set in environment variables\")", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py3", "chunk_hash": "d32176a6712274414498a334a018b852b7b5ee87a36896b8845282926321aac2", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "3"}, "stats": {"tiktokens": 86, "chars": 364, "lines": 7}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py3"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py4", "chunk_hash": "a6cda7f1c15f719b89c3a67ce25b10ef831324225181a253232c6dbf036f001a", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "4"}, "stats": {"tiktokens": 28, "chars": 108, "lines": 3}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py4"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\n# A few sanity checks\n        if openai.api_type == \"azure\" and openai.api_base is None:\n            raise ValueError(\n                \"OPENAI_API_BASE is not set in environment variables, this is required when api_type==azure\"\n            )\n        if openai.api_type == \"azure\" and openai.api_version is None:\n            raise ValueError(", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py5", "chunk_hash": "411c3ad958f00499da9a3afbc2fbcef624eb30e3030695d93ffb73b1511d0927", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "5"}, "stats": {"tiktokens": 88, "chars": 400, "lines": 9}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py5"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\n\"OPENAI_API_VERSION is not set in environment variables, this is required when api_type==azure\"\n            )\n        if openai.api_type == \"azure\" and openai.api_key.startswith(\"sk-\"):\n            raise ValueError(\n                \"OPENAI_API_KEY should not start with sk- when api_type==azure, are you using openai key by mistake?\"\n            )", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py6", "chunk_hash": "f0ef293fa10b2c7fe74e25fc8d6e869178061b07677f3dea82eacb714692c569", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "6"}, "stats": {"tiktokens": 90, "chars": 406, "lines": 8}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py6"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nclass OAIChat(OAI):\n    @retry_and_handle_exceptions(\n        exception_to_check=(\n            openai.error.RateLimitError,\n            openai.error.APIError,\n            KeyError,\n        ),\n        max_retries=5,\n        extract_delay_from_error_message=extract_delay_from_rate_limit_error_msg,\n    )\n    def generate(self, messages: list, **kwargs) -> List[float]:", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py7", "chunk_hash": "5687f605a55a75015e0d28afaed0cb9511ee78b21e5a9efff60ed2cda3390111", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "7"}, "stats": {"tiktokens": 94, "chars": 426, "lines": 13}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py7"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nif openai.api_type == \"azure\":\n            return openai.ChatCompletion.create(\n                engine=os.environ.get(\"CHAT_MODEL_DEPLOYMENT_NAME\"),\n                messages=messages,\n                **kwargs,\n            )[\"choices\"][0][\"message\"][\"content\"]\n        else:\n            return openai.ChatCompletion.create(", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py8", "chunk_hash": "badca0e2a83c8060855d476dc8b34b59e6ea30b02f8141a46ea201206b4d2df9", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "8"}, "stats": {"tiktokens": 75, "chars": 381, "lines": 10}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py8"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nmodel=os.environ.get(\"CHAT_MODEL_DEPLOYMENT_NAME\"),\n                messages=messages,\n                **kwargs,\n            )[\"choices\"][0][\"message\"][\"content\"]", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py9", "chunk_hash": "e06ae4fdcc9f621196a081a1b67a08ff56427265350c4d1b7f0316f7ff01ba1a", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "9"}, "stats": {"tiktokens": 46, "chars": 221, "lines": 6}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py9"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\n@retry_and_handle_exceptions_for_generator(\n        exception_to_check=(\n            openai.error.RateLimitError,\n            openai.error.APIError,\n            KeyError,\n        ),\n        max_retries=5,\n        extract_delay_from_error_message=extract_delay_from_rate_limit_error_msg,\n    )\n    def stream(self, messages: list, **kwargs):", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py10", "chunk_hash": "10726d6598f14a8c274b2ce1fbbddb34bfec539401d1c5519af9ddb4dfa01976", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "10"}, "stats": {"tiktokens": 84, "chars": 399, "lines": 12}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py10"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nif openai.api_type == \"azure\":\n            response = openai.ChatCompletion.create(\n                engine=os.environ.get(\"CHAT_MODEL_DEPLOYMENT_NAME\"),\n                messages=messages,\n                stream=True,\n                **kwargs,\n            )\n        else:", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py11", "chunk_hash": "619ad25b01926d3606af42582e18afa50651eaca4b4560e6bb5615744ce26875", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "11"}, "stats": {"tiktokens": 63, "chars": 329, "lines": 10}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py11"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nresponse = openai.ChatCompletion.create(\n                model=os.environ.get(\"CHAT_MODEL_DEPLOYMENT_NAME\"),\n                messages=messages,\n                stream=True,\n                **kwargs,\n            )", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py12", "chunk_hash": "ba8a03f6ae5aa721cb56471d0e88e2cdff140ca161e8dbe817ded1c8eadd20d8", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "12"}, "stats": {"tiktokens": 50, "chars": 271, "lines": 8}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py12"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nfor chunk in response:\n            if \"choices\" not in chunk or len(chunk[\"choices\"]) == 0:\n                continue\n            delta = chunk[\"choices\"][0][\"delta\"]\n            if \"content\" in delta:\n                yield delta[\"content\"]", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py13", "chunk_hash": "1e1148b81095ffa5ad04104a46d72a1ff1ff37974fb07e77f9846bf900f2cc48", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "13"}, "stats": {"tiktokens": 65, "chars": 298, "lines": 8}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py13"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\nclass OAIEmbedding(OAI):\n    @retry_and_handle_exceptions(\n        exception_to_check=openai.error.RateLimitError,\n        max_retries=5,\n        extract_delay_from_error_message=extract_delay_from_rate_limit_error_msg,\n    )\n    def generate(self, text: str) -> List[float]:\n        if openai.api_type == \"azure\":\n            return openai.Embedding.create(", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py14", "chunk_hash": "c6a4da3593052f9be620d06e1fef5ed99b315d800d1d3d11483e165f2c33ae7b", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "14"}, "stats": {"tiktokens": 96, "chars": 417, "lines": 11}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py14"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\ninput=text, engine=os.environ.get(\"EMBEDDING_MODEL_DEPLOYMENT_NAME\")\n            )[\"data\"][0][\"embedding\"]\n        else:\n            return openai.Embedding.create(\n                input=text, model=os.environ.get(\"EMBEDDING_MODEL_DEPLOYMENT_NAME\")\n            )[\"data\"][0][\"embedding\"]", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py15", "chunk_hash": "598d575c6faa5709a03922352dc29232c94625ff471ec2f744609cbc6b8ab170", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "15"}, "stats": {"tiktokens": 80, "chars": 345, "lines": 8}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py15"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\ndef count_token(text: str) -> int:\n    encoding = tiktoken.get_encoding(\"cl100k_base\")\n    return len(encoding.encode(text))", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py16", "chunk_hash": "1e5e0cefc8edd6d4b287fb33f0cdcdd2870f68b4863b3d004ae2a693d6796a68", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "16"}, "stats": {"tiktokens": 44, "chars": 183, "lines": 5}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py16"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/oai.py\n\ndef render_with_token_limit(template: Template, token_limit: int, **kwargs) -> str:\n    text = template.render(**kwargs)\n    token_count = count_token(text)\n    if token_count > token_limit:\n        message = f\"token count {token_count} exceeds limit {token_limit}\"\n        log(message)\n        raise ValueError(message)\n    return text\n\n\nif __name__ == \"__main__\":\n    print(count_token(\"hello world\"))", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/oai.py17", "chunk_hash": "28fc35305860ed8af68a82b88f5938b27519b5027a23bd7f8c61c01b9149f6a6", "source": {"title": "flows/chat-with-index/chat_with_index/utils/oai.py", "filename": "flows/chat-with-index/chat_with_index/utils/oai.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/oai.py", "mtime": 1694042161.38502, "chunk_id": "17"}, "stats": {"tiktokens": 104, "chars": 462, "lines": 14}}, "document_id": "flows/chat-with-index/chat_with_index/utils/oai.py17"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\nfrom typing import Tuple, Union, Optional\nimport functools\nimport time\nimport random", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py0", "chunk_hash": "1286a46ffd5725ac0ac4141439a3ec4377c566ee6645fe49d6c1a9de5dba83bd", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "0"}, "stats": {"tiktokens": 31, "chars": 145, "lines": 6}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py0"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\ndef retry_and_handle_exceptions(\n    exception_to_check: Union[Exception, Tuple[Exception]],\n    max_retries: int = 3,\n    initial_delay: float = 1,\n    exponential_base: float = 2,\n    jitter: bool = False,\n    extract_delay_from_error_message: Optional[any] = None,\n):\n    def deco_retry(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            delay = initial_delay", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py1", "chunk_hash": "7cf7e6f0a6bec90f32d0d47078565f91ad7fb1ba4f6c550c405f824a19e7ee44", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "1"}, "stats": {"tiktokens": 112, "chars": 460, "lines": 14}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py1"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\nfor i in range(max_retries):\n                try:\n                    return func(*args, **kwargs)\n                except exception_to_check as e:\n                    if i == max_retries - 1:\n                        raise Exception(", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py2", "chunk_hash": "48ec201ebcd8890b9bc80dc0b4553e801317f99e78691fe5a9b09b7bd6e5adca", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "2"}, "stats": {"tiktokens": 57, "chars": 293, "lines": 8}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py2"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\n\"Func execution failed after {0} retries: {1}\".format(\n                                max_retries, e\n                            )\n                        )\n                    delay *= exponential_base * (1 + jitter * random.random())", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py3", "chunk_hash": "59f092b113ad2a561fa5d4737a0c1674891b3cd2c218ba713b5983840a8faedd", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "3"}, "stats": {"tiktokens": 54, "chars": 297, "lines": 7}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py3"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\ndelay_from_error_message = None\n                    if extract_delay_from_error_message is not None:\n                        delay_from_error_message = extract_delay_from_error_message(\n                            str(e)\n                        )", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py4", "chunk_hash": "cc8b71d08dd8e668f0e7eca41290b69b7a6a1c4208fb450a79c48b405e686874", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "4"}, "stats": {"tiktokens": 50, "chars": 307, "lines": 7}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py4"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\nfinal_delay = (\n                        delay_from_error_message if delay_from_error_message else delay\n                    )\n                    print(\n                        \"Func execution failed. Retrying in {0} seconds: {1}\".format(\n                            final_delay, e", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py5", "chunk_hash": "62b95704d6791885740c8bb8261fa4c9f179c9add84cb0b9f62b262e6053bf08", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "5"}, "stats": {"tiktokens": 60, "chars": 342, "lines": 8}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py5"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\n)\n                    )\n                    time.sleep(final_delay)", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py6", "chunk_hash": "567a9f69a3ae511d247356d80ba680158776eb6c1c84100f68e438e679afaa82", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "6"}, "stats": {"tiktokens": 23, "chars": 128, "lines": 5}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py6"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\nreturn wrapper\n\n    return deco_retry", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py7", "chunk_hash": "61e8028f53571948887c33b0441279bb3f48bcf31db5183b681f64a94365067d", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "7"}, "stats": {"tiktokens": 21, "chars": 98, "lines": 5}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py7"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\ndef retry_and_handle_exceptions_for_generator(\n    exception_to_check: Union[Exception, Tuple[Exception]],\n    max_retries: int = 3,\n    initial_delay: float = 1,\n    exponential_base: float = 2,\n    jitter: bool = False,\n    extract_delay_from_error_message: Optional[any] = None,\n):\n    def deco_retry(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            delay = initial_delay", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py8", "chunk_hash": "a20b65b006d2254ba5343eeeac3174d09f5e7362b8e7d5b5afedce3c0bfb3454", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "8"}, "stats": {"tiktokens": 114, "chars": 474, "lines": 14}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py8"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\nfor i in range(max_retries):\n                try:\n                    for value in func(*args, **kwargs):\n                        yield value\n                    break\n                except exception_to_check as e:\n                    if i == max_retries - 1:", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py9", "chunk_hash": "6ca4007d94f6a015cd417bb9fc415e63b513fb902a2c0cafa2bad4d19ef95028", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "9"}, "stats": {"tiktokens": 62, "chars": 321, "lines": 9}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py9"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\nraise Exception(\n                            \"Func execution failed after {0} retries: {1}\".format(\n                                max_retries, e\n                            )\n                        )", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py10", "chunk_hash": "72d94f14cf36afc02023d1b78594a274f52ebc666cdf93d2611576d827bcba0c", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "10"}, "stats": {"tiktokens": 44, "chars": 263, "lines": 7}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py10"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\ndelay *= exponential_base * (1 + jitter * random.random())\n                    delay_from_error_message = None\n                    if extract_delay_from_error_message is not None:\n                        delay_from_error_message = extract_delay_from_error_message(\n                            str(e)", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py11", "chunk_hash": "0b77cea248fe11f4ce2ce9391cc308273176f54d51809343d9ba3f7fcbd0b42b", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "11"}, "stats": {"tiktokens": 62, "chars": 360, "lines": 7}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py11"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\n)\n                    final_delay = (\n                        delay_from_error_message if delay_from_error_message else delay\n                    )\n                    print(\n                        \"Func execution failed. Retrying in {0} seconds: {1}\".format(", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py12", "chunk_hash": "f93fcb6769c7fae09ec9f7bec399db45ec68e999092a8f3dab92ebdebe846f5a", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "12"}, "stats": {"tiktokens": 57, "chars": 321, "lines": 8}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py12"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\nfinal_delay, e\n                        )\n                    )\n                    time.sleep(final_delay)", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py13", "chunk_hash": "90e414e0078a18c41d261472cf99636b0d2b81948c2492aa34857023a21b9bae", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "13"}, "stats": {"tiktokens": 29, "chars": 167, "lines": 6}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py13"}
{"content": "Title: flows/chat-with-index/chat_with_index/utils/retry.py\n\nreturn wrapper\n\n    return deco_retry", "metadata": {"doc_id": "flows/chat-with-index/chat_with_index/utils/retry.py14", "chunk_hash": "61e8028f53571948887c33b0441279bb3f48bcf31db5183b681f64a94365067d", "source": {"title": "flows/chat-with-index/chat_with_index/utils/retry.py", "filename": "flows/chat-with-index/chat_with_index/utils/retry.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/chat-with-index/chat_with_index/utils/retry.py", "mtime": 1694042161.3869936, "chunk_id": "14"}, "stats": {"tiktokens": 21, "chars": 98, "lines": 5}}, "document_id": "flows/chat-with-index/chat_with_index/utils/retry.py14"}
{"content": "Title: flows/bring_your_own_data_chat_qna/generate_prompt_context.py\n\nfrom typing import List\nfrom promptflow import tool\nfrom promptflow_vectordb.core.contracts import SearchResultEntity\n\n\n@tool", "metadata": {"doc_id": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py0", "chunk_hash": "eaac72cb73668ac670e9b0a82b9dda44f7805988e550149db07d14bf136b4837", "source": {"title": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "filename": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "mtime": 1694042161.3105721, "chunk_id": "0"}, "stats": {"tiktokens": 44, "chars": 195, "lines": 8}}, "document_id": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py0"}
{"content": "Title: flows/bring_your_own_data_chat_qna/generate_prompt_context.py\n\ndef generate_prompt_context(search_result: List[dict]) -> str:\n    def format_doc(doc: dict):\n        return f\"Content: {doc['Content']}\\nSource: {doc['Source']}\"\n\n    SOURCE_KEY = \"source\"\n    URL_KEY = \"url\"\n\n    retrieved_docs = []\n    for item in search_result:\n\n        entity = SearchResultEntity.from_dict(item)\n        content = entity.text or \"\"", "metadata": {"doc_id": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py1", "chunk_hash": "ea752226f0f0b1097dd5dbc0f50e4015b1e40df230ec436c82dfc4ac999b9d38", "source": {"title": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "filename": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "mtime": 1694042161.3105721, "chunk_id": "1"}, "stats": {"tiktokens": 103, "chars": 424, "lines": 14}}, "document_id": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py1"}
{"content": "Title: flows/bring_your_own_data_chat_qna/generate_prompt_context.py\n\nsource = \"\"\n        if entity.metadata is not None:\n            if SOURCE_KEY in entity.metadata:\n                if URL_KEY in entity.metadata[SOURCE_KEY]:\n                    source = entity.metadata[SOURCE_KEY][URL_KEY] or \"\"", "metadata": {"doc_id": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py2", "chunk_hash": "9ac73cf3b12aefa55939fe4ee80d361277ff61f4c07ac67e73c971eff683b92b", "source": {"title": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "filename": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "mtime": 1694042161.3105721, "chunk_id": "2"}, "stats": {"tiktokens": 62, "chars": 298, "lines": 7}}, "document_id": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py2"}
{"content": "Title: flows/bring_your_own_data_chat_qna/generate_prompt_context.py\n\nretrieved_docs.append({\n            \"Content\": content,\n            \"Source\": source\n        })\n    doc_string = \"\\n\\n\".join([format_doc(doc) for doc in retrieved_docs])\n    return doc_string", "metadata": {"doc_id": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py3", "chunk_hash": "4375744bcc48dba4819120f8bc85df2e1596362e4c6e90d4db41e10989469c6f", "source": {"title": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "filename": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/bring_your_own_data_chat_qna/generate_prompt_context.py", "mtime": 1694042161.3105721, "chunk_id": "3"}, "stats": {"tiktokens": 62, "chars": 261, "lines": 8}}, "document_id": "flows/bring_your_own_data_chat_qna/generate_prompt_context.py3"}
{"content": "Title: promptflow[azure]\n\npromptflow[azure]\npromptflow-tools\nazureml-rag[faiss]\nazure-ai-ml", "metadata": {"doc_id": "flows/bring_your_own_data_chat_qna/requirements.txt0", "chunk_hash": "97a3ed3688f51610f7c0653f03bc9136a0b954a63c3b7a1fc4ed0cfd2256dea0", "source": {"title": "promptflow[azure]", "filename": "flows/bring_your_own_data_chat_qna/requirements.txt", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/flows/bring_your_own_data_chat_qna/requirements.txt", "mtime": 1694042161.31225, "chunk_id": "0"}, "stats": {"tiktokens": 29, "chars": 91, "lines": 6}}, "document_id": "flows/bring_your_own_data_chat_qna/requirements.txt0"}
{"content": "Title: data_index_job/scheduled_s3_to_asc_mlindex.py\n\n# %%[markdown]\n# # S3 via OneLake to Azure Cognitive Search Index\n\n# %% Prerequisites\n# %pip install 'azure-ai-ml==1.10.0a20230825006' --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/\n# %pip install 'azureml-rag[cognitive_search]>=0.2.0'\n\n# %% Authenticate to an AzureML Workspace, you can download a `config.json` from the top-right-hand corner menu of a Workspace.\nfrom azure.ai.ml import MLClient\nfrom azure.identity import DefaultAzureCredential", "metadata": {"doc_id": "data_index_job/scheduled_s3_to_asc_mlindex.py0", "chunk_hash": "9a184294d9022ad51e1c72102f28a9c8379454f06bce7f5c422d3801c1594c3f", "source": {"title": "data_index_job/scheduled_s3_to_asc_mlindex.py", "filename": "data_index_job/scheduled_s3_to_asc_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/scheduled_s3_to_asc_mlindex.py", "mtime": 1694042161.2334619, "chunk_id": "0"}, "stats": {"tiktokens": 149, "chars": 561, "lines": 12}}, "document_id": "data_index_job/scheduled_s3_to_asc_mlindex.py0"}
{"content": "Title: data_index_job/scheduled_s3_to_asc_mlindex.py\n\nml_client = MLClient.from_config(credential=DefaultAzureCredential(), path=\"config.json\")\n\n# %% Create DataIndex configuration\nfrom azureml.rag.dataindex.entities import Data, DataIndex, IndexSource, Embedding, IndexStore\n\nasset_name = \"s3_aoai_acs\"", "metadata": {"doc_id": "data_index_job/scheduled_s3_to_asc_mlindex.py1", "chunk_hash": "795548a48aaac6820cc4566f1ee81024263d3eb8053e182aedd2426813ec7329", "source": {"title": "data_index_job/scheduled_s3_to_asc_mlindex.py", "filename": "data_index_job/scheduled_s3_to_asc_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/scheduled_s3_to_asc_mlindex.py", "mtime": 1694042161.2334619, "chunk_id": "1"}, "stats": {"tiktokens": 76, "chars": 303, "lines": 8}}, "document_id": "data_index_job/scheduled_s3_to_asc_mlindex.py1"}
{"content": "Title: data_index_job/scheduled_s3_to_asc_mlindex.py\n\ndata_index = DataIndex(\n    name=asset_name,\n    description=\"S3 data embedded with text-embedding-ada-002 and indexed in Azure Cognitive Search.\",\n    source=IndexSource(\n        input_data=Data(\n            type=\"uri_folder\",\n            path=\"<your path to onelake>\",\n        ),\n        citation_url=\"s3://lupickup-test\",\n    ),\n    embedding=Embedding(\n        model=\"text-embedding-ada-002\",", "metadata": {"doc_id": "data_index_job/scheduled_s3_to_asc_mlindex.py2", "chunk_hash": "8d3b6f089021e861a64196dad2a95a5da0d752d6417ba5150922a5d5b85d6ebc", "source": {"title": "data_index_job/scheduled_s3_to_asc_mlindex.py", "filename": "data_index_job/scheduled_s3_to_asc_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/scheduled_s3_to_asc_mlindex.py", "mtime": 1694042161.2334619, "chunk_id": "2"}, "stats": {"tiktokens": 111, "chars": 450, "lines": 14}}, "document_id": "data_index_job/scheduled_s3_to_asc_mlindex.py2"}
{"content": "Title: data_index_job/scheduled_s3_to_asc_mlindex.py\n\nconnection=\"azureml-rag-oai\",\n        cache_path=f\"azureml://datastores/workspaceblobstore/paths/embeddings_cache/{asset_name}\",\n    ),\n    index=IndexStore(\n        type=\"acs\",\n        connection=\"azureml-rag-acs\",\n    ),\n    # name is replaced with a unique value each time the job is run\n    path=f\"azureml://datastores/workspaceblobstore/paths/indexes/{asset_name}/{{name}}\"\n)", "metadata": {"doc_id": "data_index_job/scheduled_s3_to_asc_mlindex.py3", "chunk_hash": "98e6ac596d5feef65cebc4d28fd580a6c0ec8dc7e65b307758c894e7eb0dc763", "source": {"title": "data_index_job/scheduled_s3_to_asc_mlindex.py", "filename": "data_index_job/scheduled_s3_to_asc_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/scheduled_s3_to_asc_mlindex.py", "mtime": 1694042161.2334619, "chunk_id": "3"}, "stats": {"tiktokens": 111, "chars": 434, "lines": 12}}, "document_id": "data_index_job/scheduled_s3_to_asc_mlindex.py3"}
{"content": "Title: data_index_job/scheduled_s3_to_asc_mlindex.py\n\n# %% Create the DataIndex Job to be scheduled\nfrom azure.ai.ml import UserIdentityConfiguration\n\nindex_job = ml_client.data.index_data(\n    data_index=data_index,\n    # The DataIndex Job will use the identity of the MLClient within the DataIndex Job to access source data.\n    identity=UserIdentityConfiguration(),\n    # Instead of submitting the Job and returning the Run a PipelineJob configuration is returned which can be used in with a Schedule.\n    submit_job=False\n)", "metadata": {"doc_id": "data_index_job/scheduled_s3_to_asc_mlindex.py4", "chunk_hash": "8e0d04c0c222694fbb852c34fbf4a7a9da8b116b2d48fc5f6133e6dc2b491b95", "source": {"title": "data_index_job/scheduled_s3_to_asc_mlindex.py", "filename": "data_index_job/scheduled_s3_to_asc_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/scheduled_s3_to_asc_mlindex.py", "mtime": 1694042161.2334619, "chunk_id": "4"}, "stats": {"tiktokens": 113, "chars": 527, "lines": 12}}, "document_id": "data_index_job/scheduled_s3_to_asc_mlindex.py4"}
{"content": "Title: data_index_job/scheduled_s3_to_asc_mlindex.py\n\n# %% Create Schedule for DataIndex Job\nfrom azure.ai.ml.constants import TimeZone\nfrom azure.ai.ml.entities import JobSchedule, RecurrenceTrigger, RecurrencePattern\nfrom datetime import datetime, timedelta\n\nschedule_name = \"onelake_s3_aoai_acs_mlindex_daily\"\n\nschedule_start_time = datetime.utcnow() + timedelta(minutes=1)\nrecurrence_trigger = RecurrenceTrigger(\n    frequency=\"day\",\n    interval=1,\n    #schedule=RecurrencePattern(hours=16, minutes=[15]),\n    start_time=schedule_start_time,\n    time_zone=TimeZone.UTC,\n)", "metadata": {"doc_id": "data_index_job/scheduled_s3_to_asc_mlindex.py5", "chunk_hash": "3e4b7a30596e0100fca885d94dc8a7bb7867aa09d38ef1fd98c38382afe89a42", "source": {"title": "data_index_job/scheduled_s3_to_asc_mlindex.py", "filename": "data_index_job/scheduled_s3_to_asc_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/scheduled_s3_to_asc_mlindex.py", "mtime": 1694042161.2334619, "chunk_id": "5"}, "stats": {"tiktokens": 136, "chars": 576, "lines": 17}}, "document_id": "data_index_job/scheduled_s3_to_asc_mlindex.py5"}
{"content": "Title: data_index_job/scheduled_s3_to_asc_mlindex.py\n\njob_schedule = JobSchedule(\n    name=schedule_name, trigger=recurrence_trigger, create_job=index_job, properties=index_job.properties\n)\n\n# %% Enable Schedule\njob_schedule_res = ml_client.schedules.begin_create_or_update(\n    schedule=job_schedule\n).result()\njob_schedule_res", "metadata": {"doc_id": "data_index_job/scheduled_s3_to_asc_mlindex.py6", "chunk_hash": "39471ddab56a8e82fdf1a1a48450248054472f0c880047bb772d95436030a11a", "source": {"title": "data_index_job/scheduled_s3_to_asc_mlindex.py", "filename": "data_index_job/scheduled_s3_to_asc_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/scheduled_s3_to_asc_mlindex.py", "mtime": 1694042161.2334619, "chunk_id": "6"}, "stats": {"tiktokens": 74, "chars": 328, "lines": 11}}, "document_id": "data_index_job/scheduled_s3_to_asc_mlindex.py6"}
{"content": "Title: data_index_job/scheduled_s3_to_asc_mlindex.py\n\n# %% Take a look at the schedule in Workpace Portal\nf\"https://ml.azure.com/schedule/{schedule_name}/details/overview?wsid=/subscriptions/{ml_client.subscription_id}/resourceGroups/{ml_client.resource_group_name}/providers/Microsoft.MachineLearningServices/workspaces/{ml_client.workspace_name}\"\n\n# %% Get the MLIndex Asset\nonelake_s3_index_asset = ml_client.data.get(asset_name, label=\"latest\")\nonelake_s3_index_asset\n\n## %% Try it out with langchain by loading the MLIndex asset using the azureml-rag SDK\nfrom azureml.rag.mlindex import MLIndex", "metadata": {"doc_id": "data_index_job/scheduled_s3_to_asc_mlindex.py7", "chunk_hash": "624875b4f11e44b32fece8b362333a1bdb9cac0d6ecc25430c4965f3116f4a68", "source": {"title": "data_index_job/scheduled_s3_to_asc_mlindex.py", "filename": "data_index_job/scheduled_s3_to_asc_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/scheduled_s3_to_asc_mlindex.py", "mtime": 1694042161.2334619, "chunk_id": "7"}, "stats": {"tiktokens": 145, "chars": 599, "lines": 11}}, "document_id": "data_index_job/scheduled_s3_to_asc_mlindex.py7"}
{"content": "Title: data_index_job/scheduled_s3_to_asc_mlindex.py\n\nmlindex = MLIndex(onelake_s3_index_asset)\n\nindex = mlindex.as_langchain_vectorstore()\ndocs = index.similarity_search('What is RAG?', k=5)\ndocs\n\n# %% Take a look at those chunked docs\nimport json\n\nfor doc in docs:\n    print(json.dumps({\"content\": doc.page_content, **doc.metadata}, indent=2))\n\n# %%", "metadata": {"doc_id": "data_index_job/scheduled_s3_to_asc_mlindex.py8", "chunk_hash": "60da2be27e00327c9776ec34bdc7d257d095366c2b9c9a3415c574fe95eba8a9", "source": {"title": "data_index_job/scheduled_s3_to_asc_mlindex.py", "filename": "data_index_job/scheduled_s3_to_asc_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/scheduled_s3_to_asc_mlindex.py", "mtime": 1694042161.2334619, "chunk_id": "8"}, "stats": {"tiktokens": 96, "chars": 351, "lines": 15}}, "document_id": "data_index_job/scheduled_s3_to_asc_mlindex.py8"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\n# %%[markdown]\n# # Local Documents to Azure Cognitive Search Index\n\n# %% Prerequisites\n# %pip install 'azure-ai-ml==1.10.0a20230825006' --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/\n# %pip install 'azureml-rag[faiss]>=0.2.0'\n# %pip install 'promptflow[azure]' promptflow-tools promptflow-vectordb", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py0", "chunk_hash": "77494c89495ce710ea7b3d04d82329e4b67b9dc0f7abfd795146de3cc7c03a16", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "0"}, "stats": {"tiktokens": 122, "chars": 413, "lines": 9}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py0"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\n# %% Authenticate to you AzureML Workspace, download a `config.json` from the top right hand corner menu of the Workspace.\nfrom azure.ai.ml import MLClient\nfrom azure.identity import DefaultAzureCredential\n\nml_client = MLClient.from_config(credential=DefaultAzureCredential(), path=\"config.json\")\n\n# %% Create DataIndex configuration\nfrom azureml.rag.dataindex.entities import Data, DataIndex, IndexSource, CitationRegex, Embedding, IndexStore\n\nasset_name = \"azure_search_docs_aoai_faiss\"", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py1", "chunk_hash": "4d03ae36a463fe2a474e9a92db5dbda1c90ab69fc24c1697286b3cdaa8cd603f", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "1"}, "stats": {"tiktokens": 122, "chars": 544, "lines": 12}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py1"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\ndata_index = DataIndex(\n    name=asset_name,\n    description=\"Azure Cognitive Search docs embedded with text-embedding-ada-002 and indexed in a Faiss Index.\",\n    source=IndexSource(\n        input_data=Data(\n            type=\"uri_folder\",\n            path=\"<This will be replaced later>\",\n        ),\n        input_glob=\"articles/search/**/*\",\n        citation_url=\"https://learn.microsoft.com/en-us/azure\",", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py2", "chunk_hash": "abd73bbc8e749d00edfbaba92faee976f668b1eb8c5ca8ade6481a8a665cfc84", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "2"}, "stats": {"tiktokens": 103, "chars": 462, "lines": 12}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py2"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\n# Remove articles from the final citation url and remove the file extension so url points to hosted docs, not GitHub.\n        citation_url_replacement_regex=CitationRegex(\n            match_pattern=\"(.*)/articles/(.*)(\\\\.[^.]+)$\",\n            replacement_pattern=\"\\\\1/\\\\2\"\n        )\n    ),\n    embedding=Embedding(\n        model=\"text-embedding-ada-002\",\n        connection=\"azureml-rag-oai\",", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py3", "chunk_hash": "beb3e83af20686ce35baaf9bae77158d9d6aee993d06b94786fac6bbd9d06899", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "3"}, "stats": {"tiktokens": 106, "chars": 448, "lines": 11}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py3"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\ncache_path=f\"azureml://datastores/workspaceblobstore/paths/embeddings_cache/{asset_name}\",\n    ),\n    index=IndexStore(\n        type=\"faiss\"\n    ),\n    # name is replaced with a unique value each time the job is run\n    path=f\"azureml://datastores/workspaceblobstore/paths/indexes/{asset_name}/{{name}}\"\n)", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py4", "chunk_hash": "292ce678c844a65ba9df1559137d9a05c99f619c8426220560a32fb9fb5f695f", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "4"}, "stats": {"tiktokens": 92, "chars": 361, "lines": 10}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py4"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\n# %% Use git_clone Component to clone Azure Search docs from github\nml_registry = MLClient(credential=ml_client._credential, registry_name=\"azureml\")\n\ngit_clone_component = ml_registry.components.get(\"llm_rag_git_clone\", label=\"latest\")\n\n# %% Clone Git Repo and use as input to index_job\nfrom azure.ai.ml.dsl import pipeline\nfrom azureml.rag.dataindex.data_index import index_data\n\n@pipeline(default_compute=\"serverless\")", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py5", "chunk_hash": "c6dad9d95f54647e8143b76959671c0c032af8f685190ab60b244f19b6db2466", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "5"}, "stats": {"tiktokens": 110, "chars": 477, "lines": 12}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py5"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\ndef git_to_faiss(\n    git_url,\n    branch_name=\"\",\n    git_connection_id=\"\",\n):\n    git_clone = git_clone_component(\n        git_repository=git_url,\n        branch_name=branch_name\n    )\n    git_clone.environment_variables[\"AZUREML_WORKSPACE_CONNECTION_ID_GIT\"] = git_connection_id", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py6", "chunk_hash": "75456fb3e2ceb7d830ad46dffcee20470b3f9a519d3d62282c79d16be23bea26", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "6"}, "stats": {"tiktokens": 81, "chars": 337, "lines": 12}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py6"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\nindex_job = index_data(\n        description=data_index.description,\n        data_index=data_index,\n        input_data_override=git_clone.outputs.output_data,\n        ml_client=ml_client,\n    )\n\n    return index_job.outputs\n\n# %%\ngit_index_job = git_to_faiss(\"https://github.com/MicrosoftDocs/azure-docs.git\")\n# Ensure repo cloned each run to get latest, comment out to have first clone reused.\ngit_index_job.settings.force_rerun = True", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py7", "chunk_hash": "f1826684fef654f48bf3ec5037e12fd9180ec0f7667233874a816810616e18b4", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "7"}, "stats": {"tiktokens": 111, "chars": 491, "lines": 15}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py7"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\n# %% Submit the DataIndex Job\ngit_index_run = ml_client.jobs.create_or_update(\n    git_index_job,\n    experiment_name=asset_name,\n)\ngit_index_run\n\n# %% Wait for it to finish\nml_client.jobs.stream(git_index_run.name)\n\n# %% Check the created asset, it is a folder on storage containing an MLIndex yaml file\nmlindex_docs_index_asset = ml_client.data.get(asset_name, label=\"latest\")\nmlindex_docs_index_asset\n\n# %% Try it out with langchain by loading the MLIndex asset using the azureml-rag SDK\nfrom azureml.rag.mlindex import MLIndex", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py8", "chunk_hash": "7c8259f7a73c2b94a08a2ad4f964a4d098bef2043f2a9dd2a6ce8d8438b85b24", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "8"}, "stats": {"tiktokens": 144, "chars": 586, "lines": 18}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py8"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\nmlindex = MLIndex(mlindex_docs_index_asset)\n\nindex = mlindex.as_langchain_vectorstore()\ndocs = index.similarity_search('How can I enable Semantic Search on my Index?', k=5)\ndocs\n\n# %% Take a look at those chunked docs\nimport json\n\nfor doc in docs:\n    print(json.dumps({\"content\": doc.page_content, **doc.metadata}, indent=2))\n\n# %% Try it out with Promptflow\n\nimport promptflow\n\npf = promptflow.PFClient()\n\n# %% List all the available connections\nfor c in pf.connections.list():\n    print(c.name + \" (\" + c.type + \")\")", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py9", "chunk_hash": "f084d3ed69eb6f2a8bb3bd3ecd981d4d9c6346b5c989583a02a790089725c521", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "9"}, "stats": {"tiktokens": 146, "chars": 575, "lines": 23}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py9"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\n# %% Load index qna flow\nfrom pathlib import Path\n\nflow_path = Path.cwd().parent / \"flows\" / \"bring_your_own_data_chat_qna\"\nmlindex_path = mlindex_docs_index_asset.path\n\n# %% Put MLIndex uri into Vector DB Lookup tool inputs in [bring_your_own_data_chat_qna/flow.dag.yaml](../flows/bring_your_own_data_chat_qna/flow.dag.yaml)\nimport re", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py10", "chunk_hash": "96aef1a857a1781f47b9358a9b030bfbca178d594c0cb72451940fa1582e9d23", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "10"}, "stats": {"tiktokens": 108, "chars": 391, "lines": 10}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py10"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\nwith open(flow_path / \"flow.dag.yaml\", \"r\") as f:\n    flow_yaml = f.read()\n    flow_yaml = re.sub(\n        r\"path: (.*)# Index uri\",\n        f\"path: {mlindex_path} # Index uri\",\n        flow_yaml,\n        re.M\n    )\nwith open(flow_path / \"flow.dag.yaml\", \"w\") as f:\n    f.write(flow_yaml)", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py11", "chunk_hash": "4cb4946439f3634543e92909a88ff320e5d7a75aa0ea383ec41f1ae41fd4cacd", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "11"}, "stats": {"tiktokens": 102, "chars": 344, "lines": 12}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py11"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\n# %% Run qna flow\noutput = pf.flows.test(\n    flow_path,\n    inputs={\n        \"chat_history\": [],\n        \"chat_input\": \"How recently was Vector Search support added to Azure Cognitive Search?\",\n    },\n)\n\nchat_output = output[\"chat_output\"]\nfor part in chat_output:\n    print(part, end=\"\")\n\n# %% Run qna flow with multiple inputs\ndata_path = Path.cwd().parent / \"flows\" / \"data\" / \"azure_search_docs_questions.jsonl\"", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py12", "chunk_hash": "edd6b397d0a6a9c4732ff4afdfa4338d43db7b988004d96b5af0c12bbd70d983", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "12"}, "stats": {"tiktokens": 118, "chars": 472, "lines": 17}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py12"}
{"content": "Title: data_index_job/cog_search_docs_faiss_mlindex.py\n\ncolumn_mapping = {\n    \"chat_history\": \"${data.chat_history}\",\n    \"chat_input\": \"${data.chat_input}\",\n    \"chat_output\": \"${data.chat_output}\",\n}\nrun = pf.run(flow=flow_path, data=data_path, column_mapping=column_mapping)\npf.stream(run)\n\nprint(f\"{run}\")\n\n\n# %%", "metadata": {"doc_id": "data_index_job/cog_search_docs_faiss_mlindex.py13", "chunk_hash": "8ec2c5c35efe131212752176bf1e79b923d2531dd2af7c1e58c3ca303f68315c", "source": {"title": "data_index_job/cog_search_docs_faiss_mlindex.py", "filename": "data_index_job/cog_search_docs_faiss_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/cog_search_docs_faiss_mlindex.py", "mtime": 1694042161.2294722, "chunk_id": "13"}, "stats": {"tiktokens": 81, "chars": 317, "lines": 14}}, "document_id": "data_index_job/cog_search_docs_faiss_mlindex.py13"}
{"content": "Title: data_index_job/s3_to_acs_mlindex.py\n\n# %%[markdown]\n# # S3 via OneLake to Azure Cognitive Search Index\n\n# %% Prerequisites\n# %pip install 'azure-ai-ml==1.10.0a20230825006' --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/\n# %pip install 'azureml-rag[cognitive_search]>=0.2.0'\n\n# %% Authenticate to an AzureML Workspace, you can download a `config.json` from the top-right-hand corner menu of a Workspace.\nfrom azure.ai.ml import MLClient\nfrom azure.identity import DefaultAzureCredential", "metadata": {"doc_id": "data_index_job/s3_to_acs_mlindex.py0", "chunk_hash": "d8f9eb4e709825f85e046fe3733b6c18dea52c6e1dc09bf983474dca86968c1c", "source": {"title": "data_index_job/s3_to_acs_mlindex.py", "filename": "data_index_job/s3_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/s3_to_acs_mlindex.py", "mtime": 1694042161.2327049, "chunk_id": "0"}, "stats": {"tiktokens": 148, "chars": 551, "lines": 12}}, "document_id": "data_index_job/s3_to_acs_mlindex.py0"}
{"content": "Title: data_index_job/s3_to_acs_mlindex.py\n\nml_client = MLClient.from_config(credential=DefaultAzureCredential(), path=\"config.json\")\n\n# %% Create DataIndex configuration\nfrom azureml.rag.dataindex.entities import Data, DataIndex, IndexSource, Embedding, IndexStore\n\nasset_name = \"s3_aoai_acs\"", "metadata": {"doc_id": "data_index_job/s3_to_acs_mlindex.py1", "chunk_hash": "303b151b37dcafc26edd1a1c8f0bfd8359704f4e1f8f8014f14a579f176bed92", "source": {"title": "data_index_job/s3_to_acs_mlindex.py", "filename": "data_index_job/s3_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/s3_to_acs_mlindex.py", "mtime": 1694042161.2327049, "chunk_id": "1"}, "stats": {"tiktokens": 75, "chars": 293, "lines": 8}}, "document_id": "data_index_job/s3_to_acs_mlindex.py1"}
{"content": "Title: data_index_job/s3_to_acs_mlindex.py\n\ndata_index = DataIndex(\n    name=asset_name,\n    description=\"S3 data embedded with text-embedding-ada-002 and indexed in Azure Cognitive Search.\",\n    source=IndexSource(\n        input_data=Data(\n            type=\"uri_folder\",\n            path=\"<your path to onelake>\",\n        ),\n        citation_url=\"s3://lupickup-test\",\n    ),\n    embedding=Embedding(\n        model=\"text-embedding-ada-002\",", "metadata": {"doc_id": "data_index_job/s3_to_acs_mlindex.py2", "chunk_hash": "ca05383f399c60615ac5b744eae43737061d85e7cdd58742b25ae0f679393d72", "source": {"title": "data_index_job/s3_to_acs_mlindex.py", "filename": "data_index_job/s3_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/s3_to_acs_mlindex.py", "mtime": 1694042161.2327049, "chunk_id": "2"}, "stats": {"tiktokens": 110, "chars": 440, "lines": 14}}, "document_id": "data_index_job/s3_to_acs_mlindex.py2"}
{"content": "Title: data_index_job/s3_to_acs_mlindex.py\n\nconnection=\"azureml-rag-oai\",\n        cache_path=f\"azureml://datastores/workspaceblobstore/paths/embeddings_cache/{asset_name}\",\n    ),\n    index=IndexStore(\n        type=\"acs\",\n        connection=\"azureml-rag-acs\",\n    ),\n    # name is replaced with a unique value each time the job is run\n    path=f\"azureml://datastores/workspaceblobstore/paths/indexes/{asset_name}/{{name}}\"\n)", "metadata": {"doc_id": "data_index_job/s3_to_acs_mlindex.py3", "chunk_hash": "f5e249442e0d2772925b0ef03af9365d405fac825fd8d6d6dfdb18620fcba3d6", "source": {"title": "data_index_job/s3_to_acs_mlindex.py", "filename": "data_index_job/s3_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/s3_to_acs_mlindex.py", "mtime": 1694042161.2327049, "chunk_id": "3"}, "stats": {"tiktokens": 110, "chars": 424, "lines": 12}}, "document_id": "data_index_job/s3_to_acs_mlindex.py3"}
{"content": "Title: data_index_job/s3_to_acs_mlindex.py\n\n# %% Create the DataIndex Job to be scheduled\nfrom azure.ai.ml import UserIdentityConfiguration\n\nindex_job = ml_client.data.index_data(\n    data_index=data_index,\n    # The DataIndex Job will use the identity of the MLClient within the DataIndex Job to access source data.\n    identity=UserIdentityConfiguration(),\n)\n\n# %% Wait for it to finish\nml_client.jobs.stream(index_job.name)\n\n# %% Check the created asset, it is a folder on storage containing an MLIndex yaml file\nmlindex_docs_index_asset = ml_client.data.get(data_index.name, label=\"latest\")\nmlindex_docs_index_asset", "metadata": {"doc_id": "data_index_job/s3_to_acs_mlindex.py4", "chunk_hash": "99461e5936dcdb9f1357d8ec354fcbd8d1390b897a27dd4f61e03fed8c98f58f", "source": {"title": "data_index_job/s3_to_acs_mlindex.py", "filename": "data_index_job/s3_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/s3_to_acs_mlindex.py", "mtime": 1694042161.2327049, "chunk_id": "4"}, "stats": {"tiktokens": 140, "chars": 619, "lines": 17}}, "document_id": "data_index_job/s3_to_acs_mlindex.py4"}
{"content": "Title: data_index_job/s3_to_acs_mlindex.py\n\n## %% Try it out with langchain by loading the MLIndex asset using the azureml-rag SDK\nfrom azureml.rag.mlindex import MLIndex\n\nmlindex = MLIndex(mlindex_docs_index_asset)\n\nindex = mlindex.as_langchain_vectorstore()\ndocs = index.similarity_search('What is RAG?', k=5)\ndocs\n\n# %% Take a look at those chunked docs\nimport json\n\nfor doc in docs:\n    print(json.dumps({\"content\": doc.page_content, **doc.metadata}, indent=2))", "metadata": {"doc_id": "data_index_job/s3_to_acs_mlindex.py5", "chunk_hash": "464bdfc8d724a8f39090c4b80661c605bb29d63400ac1eed2649ae56a0c1f279", "source": {"title": "data_index_job/s3_to_acs_mlindex.py", "filename": "data_index_job/s3_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/s3_to_acs_mlindex.py", "mtime": 1694042161.2327049, "chunk_id": "5"}, "stats": {"tiktokens": 124, "chars": 465, "lines": 16}}, "document_id": "data_index_job/s3_to_acs_mlindex.py5"}
{"content": "Title: data_index_job/local_docs_to_acs_mlindex.py\n\n# %%[markdown]\n# # Local Documents to Azure Cognitive Search Index\n\n# %% Prerequisites\n# %pip install 'azure-ai-ml==1.10.0a20230825006' --extra-index-url https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/\n# %pip install 'azureml-rag[cognitive_search]>=0.2.0'\n\n# %% Authenticate to you AzureML Workspace, download a `config.json` from the top right hand corner menu of the Workspace.\nfrom azure.ai.ml import MLClient, load_data\nfrom azure.identity import DefaultAzureCredential", "metadata": {"doc_id": "data_index_job/local_docs_to_acs_mlindex.py0", "chunk_hash": "29d4768b3ad3e63e4b220f3ca48bb634f7e56cd30e5fffbe97f1831de2ada264", "source": {"title": "data_index_job/local_docs_to_acs_mlindex.py", "filename": "data_index_job/local_docs_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/local_docs_to_acs_mlindex.py", "mtime": 1694042161.2308667, "chunk_id": "0"}, "stats": {"tiktokens": 146, "chars": 566, "lines": 12}}, "document_id": "data_index_job/local_docs_to_acs_mlindex.py0"}
{"content": "Title: data_index_job/local_docs_to_acs_mlindex.py\n\nml_client = MLClient.from_config(credential=DefaultAzureCredential(), path=\"config.json\")\n\n# %% Load DataIndex configuration from file\ndata_index = load_data(\"local_docs_to_acs_mlindex.yaml\")\nprint(data_index)\n\n# %% Submit the DataIndex Job\nindex_job = ml_client.data.index_data(data_index=data_index)\n\n# %% Wait for it to finish\nml_client.jobs.stream(index_job.name)", "metadata": {"doc_id": "data_index_job/local_docs_to_acs_mlindex.py1", "chunk_hash": "80b02c824b8e01100d2669eb99111afab934598e061fc80316475a4ba68cdbad", "source": {"title": "data_index_job/local_docs_to_acs_mlindex.py", "filename": "data_index_job/local_docs_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/local_docs_to_acs_mlindex.py", "mtime": 1694042161.2308667, "chunk_id": "1"}, "stats": {"tiktokens": 98, "chars": 419, "lines": 13}}, "document_id": "data_index_job/local_docs_to_acs_mlindex.py1"}
{"content": "Title: data_index_job/local_docs_to_acs_mlindex.py\n\n# %% Check the created asset, it is a folder on storage containing an MLIndex yaml file\nmlindex_docs_index_asset = ml_client.data.get(data_index.name, label=\"latest\")\nmlindex_docs_index_asset\n\n# %% Try it out with langchain by loading the MLIndex asset using the azureml-rag SDK\nfrom azureml.rag.mlindex import MLIndex\n\nmlindex = MLIndex(mlindex_docs_index_asset)\n\nindex = mlindex.as_langchain_vectorstore()\ndocs = index.similarity_search('What is an MLIndex?', k=5)\ndocs\n\n# %% Take a look at those chunked docs\nimport json", "metadata": {"doc_id": "data_index_job/local_docs_to_acs_mlindex.py2", "chunk_hash": "c4dc04b729890d4d1a97562fb8694a74bd6e03e7aae384d1fbb1e08c1a371b06", "source": {"title": "data_index_job/local_docs_to_acs_mlindex.py", "filename": "data_index_job/local_docs_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/local_docs_to_acs_mlindex.py", "mtime": 1694042161.2308667, "chunk_id": "2"}, "stats": {"tiktokens": 144, "chars": 575, "lines": 17}}, "document_id": "data_index_job/local_docs_to_acs_mlindex.py2"}
{"content": "Title: data_index_job/local_docs_to_acs_mlindex.py\n\nfor doc in docs:\n    print(json.dumps({\"content\": doc.page_content, **doc.metadata}, indent=2))\n\n# %% Try it out with Promptflow", "metadata": {"doc_id": "data_index_job/local_docs_to_acs_mlindex.py3", "chunk_hash": "3dcb8c7d5ddf33dd9947a655f5264c369e8572b16d594ed496df09b0941ef51d", "source": {"title": "data_index_job/local_docs_to_acs_mlindex.py", "filename": "data_index_job/local_docs_to_acs_mlindex.py", "url": "https://github.com/Azure/azureml-examples/blob/lupickup/rag/mlindex_pup_refresh/data_index_job/local_docs_to_acs_mlindex.py", "mtime": 1694042161.2308667, "chunk_id": "3"}, "stats": {"tiktokens": 46, "chars": 180, "lines": 6}}, "document_id": "data_index_job/local_docs_to_acs_mlindex.py3"}
