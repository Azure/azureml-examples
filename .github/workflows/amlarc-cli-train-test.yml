name: amlarc-examples-test
on:
  schedule:
    - cron: "0 23 * * *"
  workflow_dispatch:
    inputs:
      AMLARC_TEST_REGION:
        description: 'Resource Region'
        required: false
        default: 'eastus'
      AMLARC_RELEASE_TRAIN:
        description: 'Release version: experimental, staging or stable'
        required: false
        default: 'staging'
      CLEANUP_CLUSTER:
        description: 'Whether to delete cluster: true or false'
        required: false
        default: 'false'
      CLEANUP_WORKSPACE:
        description: 'Whether to delete workspace: true or false'
        required: false
        default: 'false'
      FILE_TICKET:
        description: 'Whether to file icm ticket: true or false'
        required: false
        default: 'false'
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SUBSCRIPTION: 6560575d-fa06-4e7d-95fb-f962e74efd7a
      RESOURCE_GROUP: azureml-examples-rg
      KEY_VAULT_NAME: amlarcgithubworkflowkv
      KEY_VAULT_SUB: dd94e4df-b58f-4e81-9c5e-bd72a4b2ef9e
      KEY_VAULT_RG: amlarc-github-workflow
      LOCATION: ${{ github.event.inputs.AMLARC_TEST_REGION }}
      RELEASE_TRAIN: ${{ github.event.inputs.AMLARC_RELEASE_TRAIN }}
      VM_SKU: STANDARD_NC12
      WORKSPACE: amlarc-githubtest-ws-canary

      MIN_SUCCESS_NUM: 3
      SEVERITY: 3
      OWNERS: zetia@microsoft.com;jing.zhong@microsoft.com
      GITHUB_REPO: https://github.com/Azure/azureml-examples
      WORKFLOW_URL: https://github.com/Azure/azureml-examples/actions/workflows/amlarc-cli-train-test.yml
      TSG_ID: https://microsoft.sharepoint.com/teams/Vienna/_layouts/OneNote.aspx?id=%2Fteams%2FVienna%2FSiteAssets%2FVienna%20Notebook&wd=target%28AMLArcTSG.one%7C69E8BDB1-5734-4B07-967A-5A50A91CF040%2FTroubleshooting%20github%20workflow%7C53A1A232-F9F0-4192-B7D2-0474848EBB18%2F%29

    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - name: install tools
      run: bash .github/amlarc-tool.sh install_tools
      timeout-minutes: 30
    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZ_AE_CREDS}}
      timeout-minutes: 30
    # provision resources
    - name: setup_aks
      run: bash .github/amlarc-tool.sh setup_aks
      timeout-minutes: 30
    - name: connect_arc
      run: bash .github/amlarc-tool.sh connect_arc
      timeout-minutes: 30
    - name: install_extension
      run: |
        export EXTENSION_SETTINGS="enableTraining=True enableInference=True allowInsecureConnections=True installNvidiaDevicePlugin=True installDcgmExporter=True"
        bash .github/amlarc-tool.sh install_extension
      timeout-minutes: 30
    - name: setup_workspace
      run: bash .github/amlarc-tool.sh setup_workspace
      timeout-minutes: 30
    - name: setup_compute
      run: |
        bash .github/amlarc-tool.sh setup_compute
        COMPUTE="gpu-cluster" bash .github/amlarc-tool.sh setup_compute
        COMPUTE="cpu-cluster" bash .github/amlarc-tool.sh setup_compute
      timeout-minutes: 30
    - name: setup_instance_type
      run: |
        bash .github/amlarc-tool.sh setup_instance_type defaultinstancetype 4 32Gi
        bash .github/amlarc-tool.sh setup_instance_type cpu 4 32Gi
        bash .github/amlarc-tool.sh setup_instance_type gpu 4 32Gi 2
        bash -c "echo Waiting 30 seconds for instance type to take effect ...; sleep 30"
      timeout-minutes: 30
    
    ## setup repo
    - name: create dataset
      run: |
        az account set --subscription $SUBSCRIPTION
        az configure --defaults group=$RESOURCE_GROUP workspace=$WORKSPACE location=$LOCATION
        bash create-datasets.sh
      working-directory: setup-repo
      timeout-minutes: 30

    ## skip test in this workflow, only used to setup resources.
    # ## run training cli test cases
    # ## single step
    # # dask
    # - name: run cli/jobs/single-step/dask/nyctaxi/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/dask/nyctaxi/job.yml -it cpu -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # # java
    # # - name: run cli/jobs/single-step/java/iris/job-template.yml
    # #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/java/iris/job-template.yml
    # #   continue-on-error: true
    # #   timeout-minutes: 40
    # # julia
    # - name: run cli/jobs/single-step/julia/iris/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/julia/iris/job.yml -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # # lightgbm
    # - name: run cli/jobs/single-step/lightgbm/iris/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/lightgbm/iris/job.yml -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # # pytorch
    # - name: run cli/jobs/single-step/pytorch/cifar-distributed/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/pytorch/cifar-distributed/job.yml -it gpu -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # - name: run cli/jobs/single-step/pytorch/iris/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/pytorch/iris/job.yml -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # - name: run cli/jobs/single-step/pytorch/word-language-model/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/pytorch/word-language-model/job.yml -it gpu -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # # r
    # - name: run cli/jobs/single-step/r/accidents/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/r/accidents/job.yml -it cpu -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # - name: run cli/jobs/single-step/r/iris/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/r/iris/job.yml -it cpu -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # # scikit-learn
    # - name: run cli/jobs/single-step/scikit-learn/diabetes/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/scikit-learn/diabetes/job.yml -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # #- name: run cli/jobs/single-step/scikit-learn/iris-notebook/job.yml
    # #  run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/scikit-learn/iris-notebook/job.yml compute=azureml:githubtest resources.instance_type=cpu environment_variables.AZUREML_COMPUTE_USE_COMMON_RUNTIME=true
    # #  continue-on-error: true
    # #  timeout-minutes: 40
    # - name: run cli/jobs/single-step/scikit-learn/iris/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/scikit-learn/iris/job.yml -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # # spark
    # #- name: run cli/jobs/single-step/spark/nyctaxi/job.yml
    # #  run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/spark/nyctaxi/job.yml compute=azureml:githubtest resources.instance_type=cpu environment_variables.AZUREML_COMPUTE_USE_COMMON_RUNTIME=true
    # #  continue-on-error: true
    # #  timeout-minutes: 40
    # # tensorflow
    # - name: run cli/jobs/single-step/tensorflow/mnist/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/tensorflow/mnist/job.yml -it gpu -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # - name: run cli/jobs/single-step/tensorflow/mnist-distributed/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/tensorflow/mnist-distributed/job.yml -it gpu -cr
    #   continue-on-error: true
    #   timeout-minutes: 40
    # - name: run cli/jobs/single-step/tensorflow/mnist-distributed-horovod/job.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/tensorflow/mnist-distributed-horovod/job.yml -it gpu -cr
    #   continue-on-error: true
    #   timeout-minutes: 40

    # ## pipeline
    # # cifar-10
    # - name: run cli/jobs/pipelines/cifar-10/job.yml
    #   run: |
    #     TIMEOUT=60m bash .github/amlarc-tool.sh run_cli_job cli/jobs/pipelines/cifar-10/pipeline.yml -cr
    #   continue-on-error: true
    #   timeout-minutes: 70
    # # nyc-taxi
    # - name: run cli/jobs/pipelines/nyc-taxi/job.yml
    #   run: |
    #     TIMEOUT=60m bash .github/amlarc-tool.sh run_cli_job cli/jobs/pipelines/nyc-taxi/pipeline.yml -cr
    #   continue-on-error: true
    #   timeout-minutes: 70

    # # check result
    # - name: count_result
    #   if: ${{ always() }}
    #   run: |
    #     bash .github/amlarc-tool.sh count_result
    #   timeout-minutes: 30
    - name: file_icm
      if: ${{ always() }}
      run: |
        bash .github/amlarc-tool.sh count_result || ret=$?
        if [ "$ret" != "0" ] && [ "$ret" != "" ] && [ "${{ github.event.inputs.FILE_TICKET }}" != "false" ] ; then
            # download certificates
            export ICM_HOST_NAME=ICM-HOST-AML-EXAMPLES
            export ICM_CONNECTOR_ID_NAME=ICM-CONNECTOR-ID-AML-EXAMPLES
            export ICM_ROUTING_ID_NAME=ICM-ROUTING-ID-AML-EXAMPLES
            bash .github/amlarc-tool.sh download_icm_cert
            export ICM_HOST=$(cat icm_host)
            export CONNECTOR_ID=$(cat icm_connector_id)
            export ROUTING_ID=$(cat icm_routing_id)
            export SUMMARY=$(bash .github/amlarc-tool.sh gen_summary_for_github_test)
            bash .github/amlarc-tool.sh file_icm
        fi
      timeout-minutes: 30

    - name: clean up resources
      if: ${{ always() }}
      run: |
        set +e
        bash .github/amlarc-tool.sh delete_endpoints
        bash .github/amlarc-tool.sh delete_extension
        if [ "${{ github.event.inputs.CLEANUP_CLUSTER }}" == "true" ] ; then
            bash .github/amlarc-tool.sh delete_arc
            bash .github/amlarc-tool.sh delete_aks
        fi
        if [ "${{ github.event.inputs.CLEANUP_WORKSPACE }}" == "true" ] ; then
            bash .github/amlarc-tool.sh delete_workspace
        fi
      timeout-minutes: 30
