name: amlarc-examples-test
on:
  schedule:
    - cron: "0 23 * * *"
  workflow_dispatch:
    inputs:
      AMLARC_TEST_REGION:
        description: 'Resource Region'
        required: false
        default: 'eastus'
      AMLARC_RELEASE_TRAIN:
        description: 'Release version: experimental, staging or stable'
        required: false
        default: 'staging'
      CLEANUP_CLUSTER:
        description: 'Whether to delete cluster: true or false'
        required: false
        default: 'false'
      CLEANUP_WORKSPACE:
        description: 'Whether to delete workspace: true or false'
        required: false
        default: 'false'
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SUBSCRIPTION: 6560575d-fa06-4e7d-95fb-f962e74efd7a
      RESOURCE_GROUP: azureml-examples-rg
      KEY_VAULT_NAME: amlarcgithubworkflowkv
      KEY_VAULT_SUB: dd94e4df-b58f-4e81-9c5e-bd72a4b2ef9e
      KEY_VAULT_RG: amlarc-github-workflow
      LOCATION: ${{ github.event.inputs.AMLARC_TEST_REGION }}
      RELEASE_TRAIN: ${{ github.event.inputs.AMLARC_RELEASE_TRAIN }}
      VM_SKU: STANDARD_NC12

      MIN_SUCCESS_NUM: 3
      SEVERITY: 3
      OWNERS: zetia@microsoft.com;jing.zhong@microsoft.com
      GITHUB_REPO: https://github.com/Azure/azureml-examples
      WORKFLOW_URL: https://github.com/Azure/azureml-examples/actions/workflows/amlarc-cli-train-test.yml
      
    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - name: install tools
      run: bash .github/amlarc-tool.sh install_tools
      timeout-minutes: 30
    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZ_AE_CREDS}}
      timeout-minutes: 30
    # provision resources
    - name: setup_aks
      run: bash .github/amlarc-tool.sh setup_aks
      timeout-minutes: 30
    - name: connect_arc
      run: bash .github/amlarc-tool.sh connect_arc
      timeout-minutes: 30
    - name: install_extension
      run: |
        export EXTENSION_SETTINGS="enableTraining=True enableInference=True allowInsecureConnections=True"
        bash .github/amlarc-tool.sh install_extension
      timeout-minutes: 30
    - name: setup_workspace
      run: bash .github/amlarc-tool.sh setup_workspace
      timeout-minutes: 30
    - name: setup_compute
      run: |
        bash .github/amlarc-tool.sh setup_compute
        COMPUTE="gpu-cluster" bash .github/amlarc-tool.sh setup_compute
        COMPUTE="cpu-cluster" bash .github/amlarc-tool.sh setup_compute
      timeout-minutes: 30
    - name: setup_instance_type
      run: |
        bash .github/amlarc-tool.sh setup_instance_type defaultinstancetype 8 64Gi
        bash .github/amlarc-tool.sh setup_instance_type cpu 8 64Gi
        bash .github/amlarc-tool.sh setup_instance_type gpu 8 64Gi 2
      timeout-minutes: 30
    
    ## run training cli test cases
    ## single step
    # dask
    - name: run cli/jobs/single-step/dask/nyctaxi/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/dask/nyctaxi/job.yml
      continue-on-error: true
      timeout-minutes: 30
    # java
    # - name: run cli/jobs/single-step/java/iris/job-template.yml
    #   run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/java/iris/job-template.yml
    #   continue-on-error: true
    #   timeout-minutes: 30
    # julia
    - name: run cli/jobs/single-step/julia/iris/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/julia/iris/job.yml
      continue-on-error: true
      timeout-minutes: 30
    # lightgbm
    - name: run cli/jobs/single-step/lightgbm/iris/job.yml
      run: bash .github/amlarc-tool.sh cli/jobs/single-step/lightgbm/iris/job.yml
      continue-on-error: true
      timeout-minutes: 30
    # pytorch
    - name: run cli/jobs/single-step/pytorch/cifar-distributed/job.yml
      run: INSTANCE_TYPE_NAME=gpu bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/pytorch/cifar-distributed/job.yml
      continue-on-error: true
      timeout-minutes: 30
    - name: run cli/jobs/single-step/pytorch/iris/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/pytorch/iris/job.yml
      continue-on-error: true
      timeout-minutes: 30
    - name: run cli/jobs/single-step/pytorch/word-language-model/job.yml
      run: INSTANCE_TYPE_NAME=gpu bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/pytorch/word-language-model/job.yml
      continue-on-error: true
      timeout-minutes: 30
    # r
    - name: run cli/jobs/single-step/r/accidents/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/r/accidents/job.yml
      continue-on-error: true
      timeout-minutes: 30
    - name: run cli/jobs/single-step/r/iris/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/r/iris/job.yml
      continue-on-error: true
      timeout-minutes: 30
    # scikit-learn
    - name: run cli/jobs/single-step/scikit-learn/diabetes/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/scikit-learn/diabetes/job.yml
      continue-on-error: true
      timeout-minutes: 30
    - name: run cli/jobs/single-step/scikit-learn/iris-notebook/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/scikit-learn/iris-notebook/job.yml
      continue-on-error: true
      timeout-minutes: 30
    - name: run cli/jobs/single-step/scikit-learn/iris/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/scikit-learn/iris/job.yml
      continue-on-error: true
      timeout-minutes: 30
    # spark
    - name: run cli/jobs/single-step/spark/nyctaxi/job.yml
      run: bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/spark/nyctaxi/job.yml
      continue-on-error: true
      timeout-minutes: 30 
    # tensorflow
    - name: run cli/jobs/single-step/tensorflow/mnist/job.yml
      run: INSTANCE_TYPE_NAME=gpu bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/tensorflow/mnist/job.yml
      continue-on-error: true
      timeout-minutes: 30
    - name: run cli/jobs/single-step/tensorflow/mnist-distributed/job.yml
      run: INSTANCE_TYPE_NAME=gpu bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/tensorflow/mnist-distributed/job.yml
      continue-on-error: true
      timeout-minutes: 30
    - name: run cli/jobs/single-step/tensorflow/mnist-distributed-horovod/job.yml
      run: INSTANCE_TYPE_NAME=gpu bash .github/amlarc-tool.sh run_cli_job cli/jobs/single-step/tensorflow/mnist-distributed-horovod/job.yml
      continue-on-error: true
      timeout-minutes: 30

    ## pipeline
    # cifar-10
    # - name: run cli/jobs/pipelines/cifar-10/job.yml
    #   run: |
    #     bash .github/amlarc-tool.sh run_cli_job cli/jobs/pipelines/cifar-10/job.yml \
    #           jobs.get-data.resources.instance_type=cpu \
    #           jobs.train-model.resources.instance_type=gpu \
    #           jobs.eval-model.resources.instance_type=gpu
    #   continue-on-error: true
    #   timeout-minutes: 30
    # nyc-taxi
    - name: run cli/jobs/pipelines/nyc-taxi/job.yml
      run: |
        bash .github/amlarc-tool.sh run_cli_job cli/jobs/pipelines/nyc-taxi/job.yml \
              jobs.prep-job.resources.instance_type=cpu \
              jobs.transform-job.resources.instance_type=cpu \
              jobs.train-job.resources.instance_type=cpu \
              jobs.predict-job.resources.instance_type=cpu \
              jobs.score-job.resources.instance_type=cpu
      continue-on-error: true
      timeout-minutes: 30

    # check result
    - name: count_result
      if: ${{ always() }}
      run: |
        bash .github/amlarc-tool.sh count_result
      timeout-minutes: 30
    - name: file_icm
      if: ${{ always() }}
      run: |
        bash .github/amlarc-tool.sh count_result || ret=$?
        if [ "$ret" != "0" ] && [ "$ret" != "" ] ; then
            # download certificates
            bash .github/amlarc-tool.sh download_icm_cert
            export ICM_HOST=$(cat icm_host)
            export CONNECTOR_ID=$(cat icm_connector_id)
            export ROUTING_ID=$(cat icm_routing_id)
            export SUMMARY=$(bash .github/amlarc-tool.sh gen_summary_for_github_test)
            bash .github/amlarc-tool.sh file_icm
        fi
      timeout-minutes: 30

    - name: clean up resources
      if: ${{ always() }}
      run: |
        set +e
        bash .github/amlarc-tool.sh delete_endpoints
        bash .github/amlarc-tool.sh delete_compute
        bash .github/amlarc-tool.sh delete_extension
        if [ "${{ github.event.inputs.CLEANUP_CLUSTER }}" == "true" ] ; then
            bash .github/amlarc-tool.sh delete_arc
            bash .github/amlarc-tool.sh delete_aks
        fi
        if [ "${{ github.event.inputs.CLEANUP_WORKSPACE }}" == "true" ] ; then
            bash .github/amlarc-tool.sh delete_workspace
        fi
      timeout-minutes: 30
