$schema: https://azuremlschemas.azureedge.net/development/commandComponent.schema.json
type: command

name: train_image_classification
version: 0.0.1
display_name: Train Image Classification

tags: {}
inputs:
  train_data:
    type: uri_folder
    description: "path to train dataset"
  valid_data:
    type: uri_folder
    description: "path to valid dataset"
  data_backend:
    type: string
    description: "data backend: pytorch | syntetic | dali-gpu | dali-cpu (default: dali-cpu)"
    default: "dali-cpu"
  arch:
    type: string
    description: "model architecture: resnet18 | resnet34 | resnet50 | resnet101 | resnet152 | resnext101_32x4d | se_resnext101_32x4d (default: resnet50)"
    default: "resnet50"
  model_config:
    type: string
    description: "model configs: classic | fanin | grp_fanin | grp_fanout(default: classic)"
    default: "classic"
  workers:
    type: integer
    description: "number of data loading workers (default: 5)"
    default: 5
  epochs:
    type: integer
    description: number of total epochs to run
    default: 90
  batch_size:
    type: integer
    description: "mini-batch size (default: 256) per gpu"
    default: 256
  optimizer_batch_size:
    type: integer
    description: size of a total batch size, for simulating bigger batches using gradient accumulation
    default: -1
  lr:
    type: number
    description: initial learning rate
    default: 0.1
  lr_schedule:
    type: string
    description: "Type of LR schedule: step, linear, cosine"
    default: "step"
  warmup:
    type: integer
    description: number of warmup epochs
    default: 0
  label_smoothing:
    type: number
    description: label smoothing
    default: 0.0
  mixup:
    type: number
    description: mixup alpha
    default: 0.0
  momentum:
    type: number
    description: momentum
    default: 0.9
  weight_decay:
    type: number
    description: "weight decay (default: 1e-4)"
    default: 0.0001
  print_freq:
    type: integer
    description: "print frequency (default: 10)"
    default: 10
  resume:
    type: string
    description: "path to latest checkpoint (default: none)"
    default: ""
    optional: true
  pretrained_weights:
    type: string
    description: load weights from here
    default: ""
    optional: true
  static_loss_scale:
    type: number
    description: Static loss scale, positive power of 2 values can improve fp16 convergence.
    default: 1.0
  prof:
    type: integer
    description: Run only N iterations
    default: -1
  seed:
    type: integer
    description: random seed used for numpy and pytorch
    default: 123
  raport_file:
    type: string
    description: file in which to store JSON experiment raport
    default: experiment_raport.json
  save_checkpoint_epochs:
    type: integer
    description: how many epochs run between saving checkpoints
    default: 2
outputs:
  workspace:
    type: uri_folder
    description: path to directory where checkpoints will be stored

code: ./

environment:
  image: mcr.microsoft.com/azureml/openmpi3.1.2-cuda10.2-cudnn7-ubuntu18.04
  conda_file: ./conda.yaml

resources:
  instance_count: 2
distribution:
  type: mpi
  process_count_per_instance: 1

command: >-
  git clone https://github.com/NVIDIA/apex && cd apex && git checkout 3303b3e7174383312a3468ef390060c26e640cb1 
  && python setup.py install && cd ..  
  && mldesigner execute --source entry.py --name imagecnn_train --inputs train_data=${{inputs.train_data}} 
  val_data=${{inputs.valid_data}} data_backend=${{inputs.data_backend}} arch=${{inputs.arch}} 
  model_config=${{inputs.model_config}} workers=${{inputs.workers}} epochs=${{inputs.epochs}} 
  batch_size=${{inputs.batch_size}} optimizer_batch_size=${{inputs.optimizer_batch_size}} lr=${{inputs.lr}} 
  lr_schedule=${{inputs.lr_schedule}} warmup=${{inputs.warmup}} label_smoothing=${{inputs.label_smoothing}} 
  mixup=${{inputs.mixup}} momentum=${{inputs.momentum}} weight_decay=${{inputs.weight_decay}} 
  print_freq=${{inputs.print_freq}} $[[resume=${{inputs.resume}}]] $[[pretrained_weights=${{inputs.pretrained_weights}}]] 
  static_loss_scale=${{inputs.static_loss_scale}}  prof=${{inputs.prof}} seed=${{inputs.seed}} 
  raport_file=${{inputs.raport_file}} save_checkpoint_epochs=${{inputs.save_checkpoint_epochs}} 
  workspace=${{outputs.workspace}}

