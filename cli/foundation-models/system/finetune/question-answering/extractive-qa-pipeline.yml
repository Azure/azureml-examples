$schema: https://azuremlschemas.azureedge.net/latest/pipelineJob.schema.json
type: pipeline

experiment_name: question-answering-extractive-qna

inputs:
  compute_model_import: gpu-cluster-big
  compute_preprocess: gpu-cluster-big
  compute_finetune: gpu-cluster-big
  compute_model_evaluation: gpu-cluster-big

  # specify the foundation model available in the azureml system registry
  mlflow_model_path: 
    path: azureml://registries/azureml/models/bert-based-uncased/versions/3
    # huggingface_id: 'bert-base-uncased' # if you want to use a huggingface model, uncomment this line and comment the above line

  # map the dataset files to parameters
  train_file_path: 
    type: uri_file
    path: "../../../../../sdk/python/foundation-models/system/finetune/question-answering/squad-dataset/small_train.jsonl"
  validation_file_path:
    type: uri_file
    path: "../../../../../sdk/python/foundation-models/system/finetune/question-answering/squad-dataset/small_validation.jsonl"
  test_file_path:
    type: uri_file
    path: "../../../../../sdk/python/foundation-models/system/finetune/question-answering/squad-dataset/small_test.jsonl"
  evaluation_config_path:
    type: uri_file
    path: "../../../../../sdk/python/foundation-models/system/finetune/question-answering/question-answering-config.json"
  
  # The following parameters map to the dataset fields
  # the question whose answer needs to be extracted from the provided contextÂ 
  # question_key parameter maps to the "question" field in the SQuAD dataset
  question_key: "question"
  # the context that contains the answer to the question
  # context_key parameter maps to the "context" field in the SQuAD dataset
  context_key: "context"
  # The value of this field is text in json format with two nested keys, answer_start_key and answer_text_key with their corresponding values
  # answers_key parameter maps to the "answers" field in the SQuAD dataset
  answers_key: "answers"
  # Refers to the position where the answer beings in context. Needs a value that maps to a nested key in the values of the answers_key parameter.
  # in the SQuAD dataset, the answer_start_key maps "answer_start" under "answer"
  answer_start_key: "answer_start"
  # Contains the answer to the question. Needs a value that maps to a nested key in the values of the answers_key parameter
  # in the SQuAD dataset, the answer_text_key maps to "text" under "answer"
  answer_text_key: "text"

  # training settings
  number_of_gpu_to_use_finetuning: 2
  num_train_epochs: 3
  learning_rate: 2e-5

outputs:
  # map the output of the fine tuning job to the output of pipeline job so that we can easily register the fine tuned model
  # registering the model is required to deploy the model to an online or batch endpoint
  trained_model:
    type: mlflow_model

settings:
  force_rerun: true

jobs:
  question_answering_pipeline:
    type: pipeline
    component: azureml://registries/azureml/components/question_answering_pipeline/labels/latest
    inputs:
      mlflow_model_path: ${{parent.inputs.mlflow_model_path}} 

      compute_model_import: ${{parent.inputs.compute_model_import}}
      compute_preprocess: ${{parent.inputs.compute_preprocess}}
      compute_finetune: ${{parent.inputs.compute_finetune}}
      compute_model_evaluation: ${{parent.inputs.compute_model_evaluation}}

      train_file_path: ${{parent.inputs.train_file_path}}
      validation_file_path: ${{parent.inputs.validation_file_path}}
      test_file_path: ${{parent.inputs.test_file_path}}
      evaluation_config: ${{parent.inputs.evaluation_config_path}}

      question_key: ${{parent.inputs.question_key}}
      context_key: ${{parent.inputs.context_key}}
      answers_key: ${{parent.inputs.answers_key}}
      answer_start_key: ${{parent.inputs.answer_start_key}}
      answer_text_key: ${{parent.inputs.answer_text_key}}

      number_of_gpu_to_use_finetuning: ${{parent.inputs.number_of_gpu_to_use_finetuning}}
      num_train_epochs: ${{parent.inputs.num_train_epochs}}
      learning_rate: ${{parent.inputs.learning_rate}}
    outputs:
      mlflow_model_folder: ${{parent.outputs.trained_model}}
